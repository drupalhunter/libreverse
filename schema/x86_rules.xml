<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE RULE_SET SYSTEM "ruleset.dtd">
<RULE_SET>
<CPU>
	<IO size="32" name="io_port"/>

	<!-- General purpose registers -->
	<REGISTER size="32">
		<INDEX name="EAX"/>
		<INDEX name="AX" size="16"/>
		<INDEX name="AL" size="8"/>
	</REGISTER>
	<REGISTER size="32">
		<INDEX name="EBX"/>
		<INDEX name="BX" size="16"/>
		<INDEX name="BL" size="8"/>
	</REGISTER>
	<REGISTER size="32">
		<INDEX name="ECX"/>
		<INDEX name="CX" size="16"/>
		<INDEX name="CL" size="8"/>
	</REGISTER>
	<REGISTER size="32">
		<INDEX name="EDX"/>
		<INDEX name="DX" size="16"/>
		<INDEX name="DL" size="8"/>
	</REGISTER>
	<REGISTER size="32">
		<INDEX name="ESI"/>
		<INDEX name="SI" size="16"/>
		<INDEX name="DH" size="8"/>
	</REGISTER>
	<REGISTER size="32">
		<INDEX name="EBP"/>
		<INDEX name="BP" size="16"/>
		<INDEX name="CH" size="8"/>
	</REGISTER>
	<REGISTER size="32">
		<INDEX name="EDI"/>
		<INDEX name="DI" size="16"/>
		<INDEX name="BH" size="8"/>
	</REGISTER>
	<REGISTER size="32">
		<INDEX name="ESP"/>
		<INDEX name="SP" size="16"/>
		<INDEX name="AH" size="8"/>
	</REGISTER>
	<REGISTER size="32">
		<INDEX name="EIP"/>
	</REGISTER>
	<!-- Segment registers -->
	<REGISTER size="16">
		<INDEX name="CS"/>
	</REGISTER>
	<REGISTER size="16">
		<INDEX name="DS"/>
	</REGISTER>
	<REGISTER size="16">
		<INDEX name="SS"/>
	</REGISTER>
	<REGISTER size="16">
		<INDEX name="ES"/>
	</REGISTER>
	<REGISTER size="16">
		<INDEX name="FS"/>
	</REGISTER>
	<REGISTER size="16">
		<INDEX name="GS"/>
	</REGISTER>
	<!-- EFLAGS register -->
	<REGISTER size="32">
		<INDEX name="EFLAGS"/>
		<INDEX name="ID" bit="21"/>
		<INDEX name="VIP" bit="20"/>
		<INDEX name="VIF" bit="19"/>
		<INDEX name="AC" bit="18"/>
		<INDEX name="VM" bit="17"/>
		<INDEX name="RF" bit="16"/>
		<INDEX name="NT" bit="14"/>
		<INDEX name="IOPL" bit="12" size="2"/>
		<INDEX name="OF" bit="11"/>
		<INDEX name="DF" bit="10"/>
		<INDEX name="IF" bit="9"/>
		<INDEX name="TF" bit="8"/>
		<INDEX name="SF" bit="7"/>
		<INDEX name="ZF" bit="6"/>
		<INDEX name="AF" bit="4"/>
		<INDEX name="PF" bit="2"/>
		<INDEX name="CF" bit="0"/>
	</REGISTER>
	<!-- x87 FPU registers -->
	<!--    data registers (stack) -->
	<REGISTER size="80">
		<INDEX name="R0"/>
	</REGISTER>
	<REGISTER size="80">
		<INDEX name="R1"/>
	</REGISTER>
	<REGISTER size="80">
		<INDEX name="R2"/>
	</REGISTER>
	<REGISTER size="80">
		<INDEX name="R3"/>
	</REGISTER>
	<REGISTER size="80">
		<INDEX name="R4"/>
	</REGISTER>
	<REGISTER size="80">
		<INDEX name="R5"/>
	</REGISTER>
	<REGISTER size="80">
		<INDEX name="R6"/>
	</REGISTER>
	<REGISTER size="80">
		<INDEX name="R7"/>
	</REGISTER>
	<!--    special purpose -->
	<REGISTER size="16">
		<INDEX name="x87_control"/>
	</REGISTER>
	<REGISTER size="16">
		<INDEX name="x87_status"/>
	</REGISTER>
	<REGISTER size="16">
		<INDEX name="x87_tag"/>
	</REGISTER>
	<REGISTER size="48">
		<INDEX name="LastIP"/>
	</REGISTER>
	<REGISTER size="48">
		<INDEX name="LastDataOperand"/>
	</REGISTER>
	<REGISTER size="11">
		<INDEX name="x87_opcode"/>
	</REGISTER>
</CPU>
<TABLE name="sib_register">
	<LOOKUP_FUNCTION name="sib_register">
		<ARGUMENT name="base"/>
		<ARGUMENT name="index"/>
		<ARGUMENT name="mod"/>
	</LOOKUP_FUNCTION>
	<KEY_LIST name="mod">
		<VALUE val="0"/>
		<VALUE val="1"/>
		<VALUE val="2"/>
	</KEY_LIST>
	<KEY name="base">
		<VALUE val="0">
			<KEY name="mod">
				<VALUE val="*">
					<TARGET name="EAX"/>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="1">
			<KEY name="mod">
				<VALUE val="*">
					<TARGET name="ECX"/>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="2">
			<KEY name="mod">
				<VALUE val="*">
					<TARGET name="EDX"/>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="3">
			<KEY name="mod">
				<VALUE val="*">
					<TARGET name="EBX"/>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="4">
			<KEY name="mod">
				<VALUE val="*">
					<TARGET name="ESP"/>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="5">
			<KEY name="mod">
				<VALUE val="0">
					<TARGET name="index+disp32"/>
					<GRAMMAR>DWORD</GRAMMAR>
					<OUTPUT>$index + $DWORD.value</OUTPUT>
				</VALUE>
				<VALUE val="1">
					<TARGET name="index+disp8+EBP"/>
					<GRAMMAR>BYTE</GRAMMAR>
					<OUTPUT>$index + $BYTE.value + EBP</OUTPUT>
				</VALUE>
				<VALUE val="2">
					<TARGET name="index+disp32+EBP"/>
					<GRAMMAR>DWORD</GRAMMAR>
					<OUTPUT>$index + $DWORD.value + EBP</OUTPUT>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="6">
			<KEY name="mod">
				<VALUE val="*">
					<TARGET name="ESI"/>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="7">
			<KEY name="mod">
				<VALUE val="*">
					<TARGET name="EDI"/>
				</VALUE>
			</KEY>
		</VALUE>
	</KEY>
</TABLE>
<TABLE name="sib_scaled_index">
	<LOOKUP_FUNCTION name="sib_scaled_index">
		<ARGUMENT name="scale"/>
		<ARGUMENT name="index"/>
	</LOOKUP_FUNCTION>
	<KEY name="scale">
		<VALUE val="0">
			<KEY name="index">
				<VALUE val="0">
					<TARGET name="[EAX]"/>
				</VALUE>
				<VALUE val="1">
					<TARGET name="[ECX]"/>
				</VALUE>
				<VALUE val="2">
					<TARGET name="[EDX]"/>
				</VALUE>
				<VALUE val="3">
					<TARGET name="[EBX]"/>
				</VALUE>
				<VALUE val="4">
					<TARGET name="none"/>
				</VALUE>
				<VALUE val="5">
					<TARGET name="[EBP]"/>
				</VALUE>
				<VALUE val="6">
					<TARGET name="[ESI]"/>
				</VALUE>
				<VALUE val="7">
					<TARGET name="[EDI]"/>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="1">
			<KEY name="index">
				<VALUE val="0">
					<TARGET name="[EAX*2]"/>
				</VALUE>
				<VALUE val="1">
					<TARGET name="[ECX*2]"/>
				</VALUE>
				<VALUE val="2">
					<TARGET name="[EDX*2]"/>
				</VALUE>
				<VALUE val="3">
					<TARGET name="[EBX*2]"/>
				</VALUE>
				<VALUE val="4">
					<TARGET name="none"/>
				</VALUE>
				<VALUE val="5">
					<TARGET name="[EBP*2]"/>
				</VALUE>
				<VALUE val="6">
					<TARGET name="[ESI*2]"/>
				</VALUE>
				<VALUE val="7">
					<TARGET name="[EDI*2]"/>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="2">
			<KEY name="index">
				<VALUE val="0">
					<TARGET name="[EAX*4]"/>
				</VALUE>
				<VALUE val="1">
					<TARGET name="[ECX*4]"/>
				</VALUE>
				<VALUE val="2">
					<TARGET name="[EDX*4]"/>
				</VALUE>
				<VALUE val="3">
					<TARGET name="[EBX*4]"/>
				</VALUE>
				<VALUE val="4">
					<TARGET name="none"/>
				</VALUE>
				<VALUE val="5">
					<TARGET name="[EBP*4]"/>
				</VALUE>
				<VALUE val="6">
					<TARGET name="[ESI*4]"/>
				</VALUE>
				<VALUE val="7">
					<TARGET name="[EDI*4]"/>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="3">
			<KEY name="index">
				<VALUE val="0">
					<TARGET name="[EAX*8]"/>
				</VALUE>
				<VALUE val="1">
					<TARGET name="[ECX*8]"/>
				</VALUE>
				<VALUE val="2">
					<TARGET name="[EDX*8]"/>
				</VALUE>
				<VALUE val="3">
					<TARGET name="[EBX*8]"/>
				</VALUE>
				<VALUE val="4">
					<TARGET name="none"/>
				</VALUE>
				<VALUE val="5">
					<TARGET name="[EBP*8]"/>
				</VALUE>
				<VALUE val="6">
					<TARGET name="[ESI*8]"/>
				</VALUE>
				<VALUE val="7">
					<TARGET name="[EDI*8]"/>
				</VALUE>
			</KEY>
		</VALUE>
	</KEY>
</TABLE>
<TABLE name="register">
	<LOOKUP_FUNCTION name="register">
		<ARGUMENT name="rm"/>
		<ARGUMENT name="size"/>
	</LOOKUP_FUNCTION>
	<KEY name="rm">
		<VALUE val="0">
			<KEY name="size">
				<VALUE val="8">
					<TARGET name="AL"/>
				</VALUE>
				<VALUE val="16">
					<TARGET name="AX"/>
				</VALUE>
				<VALUE val="32">
					<TARGET name="EAX"/>
				</VALUE>
				<VALUE val="64">
					<TARGET name="MM0"/>
				</VALUE>
				<VALUE val="128">
					<TARGET name="XMM0"/>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="1">
			<KEY name="size">
				<VALUE val="8">
					<TARGET name="CL"/>
				</VALUE>
				<VALUE val="16">
					<TARGET name="CX"/>
				</VALUE>
				<VALUE val="32">
					<TARGET name="ECX"/>
				</VALUE>
				<VALUE val="64">
					<TARGET name="MM1"/>
				</VALUE>
				<VALUE val="128">
					<TARGET name="XMM1"/>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="2">
			<KEY name="size">
				<VALUE val="8">
					<TARGET name="DL"/>
				</VALUE>
				<VALUE val="16">
					<TARGET name="DX"/>
				</VALUE>
				<VALUE val="32">
					<TARGET name="EDX"/>
				</VALUE>
				<VALUE val="64">
					<TARGET name="MM2"/>
				</VALUE>
				<VALUE val="128">
					<TARGET name="XMM2"/>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="3">
			<KEY name="size">
				<VALUE val="8">
					<TARGET name="BL"/>
				</VALUE>
				<VALUE val="16">
					<TARGET name="BX"/>
				</VALUE>
				<VALUE val="32">
					<TARGET name="EBX"/>
				</VALUE>
				<VALUE val="64">
					<TARGET name="MM3"/>
				</VALUE>
				<VALUE val="128">
					<TARGET name="XMM3"/>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="4">
			<KEY name="size">
				<VALUE val="8">
					<TARGET name="AH"/>
				</VALUE>
				<VALUE val="16">
					<TARGET name="SP"/>
				</VALUE>
				<VALUE val="32">
					<TARGET name="ESP"/>
				</VALUE>
				<VALUE val="64">
					<TARGET name="MM4"/>
				</VALUE>
				<VALUE val="128">
					<TARGET name="XMM4"/>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="5">
			<KEY name="size">
				<VALUE val="8">
					<TARGET name="CH"/>
				</VALUE>
				<VALUE val="16">
					<TARGET name="BP"/>
				</VALUE>
				<VALUE val="32">
					<TARGET name="EBP"/>
				</VALUE>
				<VALUE val="64">
					<TARGET name="MM5"/>
				</VALUE>
				<VALUE val="128">
					<TARGET name="XMM5"/>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="6">
			<KEY name="size">
				<VALUE val="8">
					<TARGET name="DH"/>
				</VALUE>
				<VALUE val="16">
					<TARGET name="SI"/>
				</VALUE>
				<VALUE val="32">
					<TARGET name="ESI"/>
				</VALUE>
				<VALUE val="64">
					<TARGET name="MM6"/>
				</VALUE>
				<VALUE val="128">
					<TARGET name="XMM6"/>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="7">
			<KEY name="size">
				<VALUE val="8">
					<TARGET name="BH"/>
				</VALUE>
				<VALUE val="16">
					<TARGET name="DI"/>
				</VALUE>
				<VALUE val="32">
					<TARGET name="EDI"/>
				</VALUE>
				<VALUE val="64">
					<TARGET name="MM7"/>
				</VALUE>
				<VALUE val="128">
					<TARGET name="XMM7"/>
				</VALUE>
			</KEY>
		</VALUE>
	</KEY>
</TABLE>
<TABLE name="segmentation register">
	<LOOKUP_FUNCTION name="seg_register">
		<ARGUMENT name="reg"/>
	</LOOKUP_FUNCTION>
	<KEY name="reg">
		<VALUE val="0">
			<TARGET name="ES"/>
		</VALUE>
		<VALUE val="1">
			<TARGET name="CS"/>
		</VALUE>
		<VALUE val="2">
			<TARGET name="SS"/>
		</VALUE>
		<VALUE val="3">
			<TARGET name="DS"/>
		</VALUE>
		<VALUE val="4">
			<TARGET name="FS"/>
		</VALUE>
		<VALUE val="5">
			<TARGET name="GS"/>
		</VALUE>
	</KEY>
</TABLE>
<TABLE name="effective 32-bit address">
	<LOOKUP_FUNCTION name="effective_32addr">
		<ARGUMENT name="mod"/>
		<ARGUMENT name="rm"/>
		<ARGUMENT name="size"/>
	</LOOKUP_FUNCTION>
	<KEY_LIST name="mod">
		<VALUE val="0"/>
		<VALUE val="1"/>
		<VALUE val="2"/>
		<VALUE val="3"/>
	</KEY_LIST>
	<KEY_LIST name="rm">
		<VALUE val="0"/>
		<VALUE val="1"/>
		<VALUE val="2"/>
		<VALUE val="3"/>
		<VALUE val="4"/>
		<VALUE val="5"/>
		<VALUE val="6"/>
		<VALUE val="7"/>
	</KEY_LIST>
	<KEY_LIST name="size">
		<VALUE val="8"/>
		<VALUE val="16"/>
		<VALUE val="32"/>
		<VALUE val="64"/>
		<VALUE val="128"/>
	</KEY_LIST>
	<KEY name="mod">
		<VALUE val="0">
			<KEY name="rm">
				<VALUE val="0">
					<KEY name="size">
						<!-- An asterisk means that for any value of 'size'
						     we return 'EAX' -->
						<VALUE val="*">
							<TARGET name="EAX"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="1">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="ECX"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="2">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="EDX"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="3">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="EBX"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="4">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="SIB"/>
							<GRAMMAR>SIB</GRAMMAR>
							<!-- TODO: Unsure how the SIB byte is used -->
							<OUTPUT>sib_register($MOD_RM.mod,$SIB.index,$SIB.reg)+
								sib_addr($SIB.scale, $SIB.index)</OUTPUT>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="5">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="disp32"/>
							<GRAMMAR>DWORD</GRAMMAR>
							<OUTPUT>$DWORD.value</OUTPUT>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="6">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="ESI"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="7">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="EDI"/>
						</VALUE>
					</KEY>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="1">
			<KEY name="rm">
				<VALUE val="0">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="EAX+disp8"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="1">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="ECX+disp8"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="2">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="EDX+disp8"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="3">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="EBX+disp8"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="4">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="SIB+disp8"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="5">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="disp32+disp8"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="6">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="ESI+disp8"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="7">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="EDI+disp8"/>
						</VALUE>
					</KEY>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="2">
			<KEY name="rm">
				<VALUE val="0">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="EAX+disp32"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="1">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="ECX+disp32"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="2">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="EDX+disp32"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="3">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="EBX+disp32"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="4">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="SIB+disp32"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="5">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="disp32+disp32"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="6">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="ESI+disp32"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="7">
					<KEY name="size">
						<VALUE val="*">
							<TARGET name="EDI+disp32"/>
						</VALUE>
					</KEY>
				</VALUE>
			</KEY>
		</VALUE>
		<VALUE val="4">
			<KEY name="rm">
				<VALUE val="0">
					<KEY name="size">
						<VALUE val="8">
							<TARGET name="AL"/>
						</VALUE>
						<VALUE val="16">
							<TARGET name="AX"/>
						</VALUE>
						<VALUE val="32">
							<TARGET name="EAX"/>
						</VALUE>
						<VALUE val="64">
							<TARGET name="MM0"/>
						</VALUE>
						<VALUE val="128">
							<TARGET name="XMM0"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="1">
					<KEY name="size">
						<VALUE val="8">
							<TARGET name="CL"/>
						</VALUE>
						<VALUE val="16">
							<TARGET name="CX"/>
						</VALUE>
						<VALUE val="32">
							<TARGET name="ECX"/>
						</VALUE>
						<VALUE val="64">
							<TARGET name="MM1"/>
						</VALUE>
						<VALUE val="128">
							<TARGET name="XMM1"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="2">
					<KEY name="size">
						<VALUE val="8">
							<TARGET name="DL"/>
						</VALUE>
						<VALUE val="16">
							<TARGET name="DX"/>
						</VALUE>
						<VALUE val="32">
							<TARGET name="EDX"/>
						</VALUE>
						<VALUE val="64">
							<TARGET name="MM2"/>
						</VALUE>
						<VALUE val="128">
							<TARGET name="XMM2"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="3">
					<KEY name="size">
						<VALUE val="8">
							<TARGET name="BL"/>
						</VALUE>
						<VALUE val="16">
							<TARGET name="BX"/>
						</VALUE>
						<VALUE val="32">
							<TARGET name="EBX"/>
						</VALUE>
						<VALUE val="64">
							<TARGET name="MM3"/>
						</VALUE>
						<VALUE val="128">
							<TARGET name="XMM3"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="4">
					<KEY name="size">
						<VALUE val="8">
							<TARGET name="AH"/>
						</VALUE>
						<VALUE val="16">
							<TARGET name="SP"/>
						</VALUE>
						<VALUE val="32">
							<TARGET name="ESP"/>
						</VALUE>
						<VALUE val="64">
							<TARGET name="MM4"/>
						</VALUE>
						<VALUE val="128">
							<TARGET name="XMM4"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="5">
					<KEY name="size">
						<VALUE val="8">
							<TARGET name="CH"/>
						</VALUE>
						<VALUE val="16">
							<TARGET name="BP"/>
						</VALUE>
						<VALUE val="32">
							<TARGET name="EBP"/>
						</VALUE>
						<VALUE val="64">
							<TARGET name="MM5"/>
						</VALUE>
						<VALUE val="128">
							<TARGET name="XMM5"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="6">
					<KEY name="size">
						<VALUE val="8">
							<TARGET name="DH"/>
						</VALUE>
						<VALUE val="16">
							<TARGET name="SI"/>
						</VALUE>
						<VALUE val="32">
							<TARGET name="ESI"/>
						</VALUE>
						<VALUE val="64">
							<TARGET name="MM6"/>
						</VALUE>
						<VALUE val="128">
							<TARGET name="XMM6"/>
						</VALUE>
					</KEY>
				</VALUE>
				<VALUE val="7">
					<KEY name="size">
						<VALUE val="8">
							<TARGET name="BH"/>
						</VALUE>
						<VALUE val="16">
							<TARGET name="DI"/>
						</VALUE>
						<VALUE val="32">
							<TARGET name="EDI"/>
						</VALUE>
						<VALUE val="64">
							<TARGET name="MM7"/>
						</VALUE>
						<VALUE val="128">
							<TARGET name="XMM7"/>
						</VALUE>
					</KEY>
				</VALUE>
			</KEY>
		</VALUE>
	</KEY>
</TABLE>
<TOKEN name="MOD_RM">
	<BINARY_DATA size="8">
		<BINARY_ITEM name="mod" shift="6" mask="0xC0"/>
		<BINARY_ITEM name="reg" shift="3" mask="0x38"/>
		<BINARY_ITEM name="rm" mask="0x07"/>
	</BINARY_DATA>
</TOKEN>
<TOKEN name="SIB">
	<BINARY_DATA size="8">
		<BINARY_ITEM name="scale" shift="6" mask="0xC0"/>
		<BINARY_ITEM name="index" shift="3" mask="0x38"/>
		<BINARY_ITEM name="base" mask="0x07"/>
	</BINARY_DATA>
</TOKEN>
<TOKEN name="BYTE">
	<BINARY_DATA size="8">
		<BINARY_ITEM name="value" mask="0xFF"/>
	</BINARY_DATA>
</TOKEN>
<TOKEN name="WORD">
	<BINARY_DATA size="16">
		<BINARY_ITEM name="value" mask="0xFFFF"/>
	</BINARY_DATA>
</TOKEN>
<TOKEN name="DWORD">
	<BINARY_DATA size="32">
		<BINARY_ITEM name="value" mask="0xFFFFFFFF"/>
	</BINARY_DATA>
</TOKEN>
<RULE name="X86_INSTRUCTIONS">
	<GRAMMAR>DATA_TRANSFER_INSTRUCTIONS |
		    BINARY_ARITHMETIC_INSTRUCTIONS |
		    DECIMAL_ARITHMETIC_INSTRUCTIONS |
		    LOGICAL_INSTRUCTIONS |
		    SHIFT_ROTATION_INSTRUCTIONS |
		    BIT_BYTE_INSTRUCTIONS |
		    CONTROL_TRANSFER_INSTRUCTIONS |
		    STRING_INSTRUCTIONS |
		    IO_INSTRUCTIONS |
		    ENTER_LEAVE_INSTRUCTIONS |
		    EFLAG_INSTRUCTIONS |
		    SEGMENT_REGISTER_INSTRUCTIONS |
		    MISCELLANEOUS_INSTRUCTIONS
	</GRAMMAR>
</RULE>

<!-- ******************************************* -->
<!--        MISCELLANEOUS INSTRUCTIONS        -->
<!-- ******************************************* -->
<RULE name="MISCELLANEOUS_INSTRUCTIONS">
	<GRAMMAR>LEA |
		 NOP |
		 UD2 |
		 XLATB |
		 CPUID
	</GRAMMAR>
</RULE>
<RULE name="LEA">
	<GRAMMAR>0x8D MOD_RM ?SIB</GRAMMAR>
	<OUTPUT>register($MOD_RM.reg,32) :=
		effective_32addr ($MOD_RM.mod, $MOD_RM.rm, 32)
	</OUTPUT>
</RULE>
<RULE name="NOP">
	<GRAMMAR>0x90</GRAMMAR>
</RULE>
<RULE name="UD2">
	<GRAMMAR>0x0F 0x0B</GRAMMAR>
</RULE>
<RULE name="XLATB">
	<GRAMMAR>0xD7</GRAMMAR>
	<OUTPUT>AL := DS[EBX] + AL</OUTPUT>
</RULE>
<RULE name="CPUID">
	<GRAMMAR>0x0F 0xA2</GRAMMAR>
</RULE>


<!-- ******************************************* -->
<!--        SEGMENT REGISTER INSTRUCTIONS        -->
<!-- ******************************************* -->
<RULE name="SEGMENT_REGISTER_INSTRUCTIONS">
	<GRAMMAR>LDS |
		 LSS |
		 LES |
		 LFS |
		 LGS
	</GRAMMAR>
</RULE>
<!-- Load DS segment register -->
<RULE name="LDS">
	<GRAMMAR>0xC5 MOD_RM</GRAMMAR>
	<OUTPUT>DS := effective_32addr($MOD_RM.mod,$MOD_RM.rm,32)
		EIP := DS[register($MOD_RM.reg,32)]
	</OUTPUT>
</RULE>
<!-- Load SS segment register -->
<RULE name="LSS">
	<GRAMMAR>0x0F 0xB2 MOD_RM</GRAMMAR>
	<OUTPUT>SS := effective_32addr($MOD_RM.mod, $MOD_RM.rm, 32)
		EIP := SS[register($MOD_RM.reg,32)]
	</OUTPUT>
</RULE>
<!-- Load ES segment register -->
<RULE name="LES">
	<GRAMMAR>0xC4 MOD_RM</GRAMMAR>
	<OUTPUT>ES := effective_32addr($MOD_RM.mod,$MOD_RM.rm,32)
		EIP := ES[register($MOD_RM.reg,32)]
	</OUTPUT>
</RULE>
<!-- Load FS segment register -->
<RULE name="LFS">
	<GRAMMAR>0x0F 0xB4 MOD_RM</GRAMMAR>
	<OUTPUT>FS := effective_32addr($MOD_RM.mod, $MOD_RM.rm, 32)
		EIP := FS[register($MOD_RM.reg,32)]
	</OUTPUT>
</RULE>
<!-- Load GS segment register -->
<RULE name="LGS">
	<GRAMMAR>0x0F 0xB5 MOD_RM</GRAMMAR>
	<OUTPUT>GS := effective_32addr($MOD_RM.mod, $MOD_RM.rm, 32)
		EIP := GS[register($MOD_RM.reg,32)]
	</OUTPUT>
</RULE>


<!-- ******************************************* -->
<!--            EFLAG_INSTRUCTIONS               -->
<!-- ******************************************* -->
<RULE name="EFLAG_INSTRUCTIONS">
	<GRAMMAR>STC |
		 CLC |
		 CMC |
		 CLD |
		 STD |
		 LAHF |
		 SAHF |
		 PUSHFD |
		 STI |
		 CLI
	</GRAMMAR>
</RULE>
<RULE name="STC">
	<GRAMMAR>0xF9</GRAMMAR>
	<OUTPUT>EFLAGS[CF] := 1</OUTPUT>
</RULE>
<RULE name="CLC">
	<GRAMMAR>0xF8</GRAMMAR>
	<OUTPUT>EFLAGS[CF] := 0</OUTPUT>
</RULE>
<RULE name="CMC">
	<GRAMMAR>0xF9</GRAMMAR>
	<OUTPUT>if (EFLAGS[CF) == 1)
		{
			EFLAGS(CF):= 0
		}
		else
		{
			EFLAGS(CF]:=1
		}</OUTPUT>
</RULE>
<RULE name="CLD">
	<GRAMMAR>0xFC</GRAMMAR>
	<OUTPUT>EFLAGS[DF] := 0</OUTPUT>
</RULE>
<RULE name="STD">
	<GRAMMAR>0xFD</GRAMMAR>
	<OUTPUT>EFLAGS[DF] := 1</OUTPUT>
</RULE>
<RULE name="LAHF">
	<GRAMMAR>0x9F</GRAMMAR>
	<OUTPUT>AH := EFLAGS & 0x000000FF</OUTPUT> <!-- Copy first eight bytes from EFLAGS to AH -->
</RULE>
<RULE name="SAHF">
	<GRAMMAR>0x9F</GRAMMAR>
	<OUTPUT>EFLAGS := (EFLAGS & 0xFFFFFF00) & AH</OUTPUT>
</RULE>
<RULE name="PUSHFD">
	<GRAMMAR>0x9C</GRAMMAR>
	<OUTPUT>PUSH(EFLAGS & 0x00FCFFFF)
		ESP := ESP - 4
	</OUTPUT>
</RULE>
<RULE name="POPFD">
	<GRAMMAR>0x9D</GRAMMAR>
	<OUTPUT>EFLAGS := SS:ESP
		ESP := ESP + 4
	</OUTPUT>
</RULE>
<RULE name="STI">
	<GRAMMAR>0xFB</GRAMMAR>
	<OUTPUT>EFLAGS[IF] := 1</OUTPUT>
</RULE>
<RULE name="CLI">
	<GRAMMAR>0xFA</GRAMMAR>
	<OUTPUT>EFLAGS[IF] := 0</OUTPUT>
</RULE>


<!-- ******************************************* -->
<!--            ENTER_LEAVE_INSTRUCTIONS         -->
<!-- ******************************************* -->
<RULE name="ENTER_LEAVE_INSTRUCTIONS">
	<GRAMMAR>ENTER | LEAVE</GRAMMAR>
</RULE>
<RULE name="ENTER">
	<GRAMMAR>ENTER_CREATE_STACK_FRAME |
		ENTER_ONE_LEVEL_NESTED_STACK_FRAME |
		ENTER_NESTED_STACK_FRAME
	</GRAMMAR>
</RULE>
<RULE name="ENTER_CREATE_STACK_FRAME">
	<GRAMMAR>0xC8 WORD BYTE(0x00)</GRAMMAR>
	<OUTPUT>ENTER $WORD.value,$BYTE.value</OUTPUT>
</RULE>
<RULE name="ENTER_ONE_LEVEL_NESTED_STACK_FRAME">
	<GRAMMAR>0xC8 WORD BYTE(0x01)</GRAMMAR>
	<OUTPUT>ENTER $WORD.value,$BYTE.value</OUTPUT>
</RULE>
<RULE name="ENTER_NESTED_STACK_FRAME">
	<GRAMMAR>0xC8 WORD BYTE</GRAMMAR>
	<OUTPUT>ENTER $WORD.value,$BYTE.value</OUTPUT>
</RULE>
<!-- TODO: How to represent a pop off a stack -->
<RULE name="LEAVE">
	<GRAMMAR>0xC9</GRAMMAR>
	<OUTPUT>ESP := EBP       <!-- Set ESP to return instruction pointer -->
		EBP := stack[0]  <!-- Set EBP to top of stack -->
	</OUTPUT>
</RULE>

<!-- ******************************************* -->
<!--            IO_INSTRUCTIONS                  -->
<!-- ******************************************* -->
<RULE name="IO_INSTRUCTIONS">
	<GRAMMAR>IN | OUT | INS | OUTS</GRAMMAR>
</RULE>
<!-- TODO: Write rules for INSB,INSW,INSD,OUTSB, OUTSW, OUTSD -->
<RULE name="IN">
	<GRAMMAR>IN_FIXED_PORT_AL_BYTE |
		IN_FIXED_PORT_EAX_BYTE |
		IN_VARAIBLE_PORT_AL_DX |
		IN_VARIABLE_PORT_EAX_DX
	</GRAMMAR>
</RULE>
<RULE name="IN_FIXED_PORT_AL_BYTE">
	<GRAMMAR>0xE4 BYTE</GRAMMAR>
	<!-- Or a bit more verbose format? -->
	<OUTPUT>AL := io_port[$BYTE.value]</OUTPUT>
</RULE>
<RULE name="IN_FIXED_PORT_EAX_BYTE">
	<GRAMMAR>0xE5 BYTE</GRAMMAR>
	<OUTPUT>EAX := io_port[$BYTE.value]</OUTPUT>
</RULE>
<RULE name="IN_VARIABLE_PORT_AL_DX">
	<GRAMMAR>0xE5</GRAMMAR>
	<OUTPUT>AL := io_port[DX]</OUTPUT>
</RULE>
<RULE name="IN_VARIABLE_PORT_EAX_DX">
	<GRAMMAR>0xE5</GRAMMAR>
	<OUTPUT>EAX := io_port[DX]</OUTPUT>
</RULE>
<RULE name="OUT">
	<GRAMMAR>OUTPUT_FIXED_PORT_AL_BYTE |
		OUTPUT_FIXED_PORT_EAX_BYTE |
		OUTPUT_VARIABLE_PORT_AL_DX |
		OUTPUT_VARIABLE_PORT_EAX_DX
	</GRAMMAR>
</RULE>
<RULE name="OUT_FIXED_PORT_AL_BYTE">
	<GRAMMAR>0xE6 BYTE</GRAMMAR>
	<OUTPUT>io_port[$BYTE.value] := AL</OUTPUT>
</RULE>
<RULE name="OUT_FIXED_PORT_EAX_BYTE">
	<GRAMMAR>0xE7 BYTE</GRAMMAR>
	<OUTPUT>io_port[$BYTE.value] := EAX</OUTPUT>
</RULE>
<RULE name="OUT_VARIABLE_PORT_AL_DX">
	<GRAMMAR>0xEE</GRAMMAR>
	<OUTPUT>io_port[DX] := AL</OUTPUT>
</RULE>
<RULE name="OUT_VARIABLE_PORT_EAX_DX">
	<GRAMMAR>0xEF</GRAMMAR>
	<OUTPUT>io_port[DX] := EAX</OUTPUT>
</RULE>

<!-- ******************************************* -->
<!--            STRING_INSTRUCTIONS              -->
<!-- ******************************************* -->
<RULE name="STRING_INSTRUCTIONS">
	<GRAMMAR>MOVS | CMPS | SCAS | LODS | STOS | REP</GRAMMAR>
</RULE>
<RULE name="MOVS">
	<GRAMMAR>MOVS_BYTE |
		MOVS_DWORD
	</GRAMMAR>
</RULE>
<!-- move byte from DS:ESI to ES:EDI -->
<RULE name="MOVS_BYTE">
	<GRAMMAR>A4</GRAMMAR>
	<OUTPUT>ES:EDI := DS:ESI
		if (EFLAGS[DF] == 0)
		{
			ESI := ESI + 1
			EDI := EDI + 1
		}
		else
		{
			ESI := ESI - 1
			EDI := EDI - 1
		}
	</OUTPUT>
</RULE>
<!-- move dword from DS:ESI to ES:EDI -->
<RULE name="MOVS_DWORD">
	<GRAMMAR>A5</GRAMMAR>
	<OUTPUT>ES:EDI := DS:ESI
		if (EFLAGS[DF] == 0)
		{
			ESI := ESI + 4
			EDI := EDI + 4
		}
		else
		{
			ESI := ESI - 4
			EDI := EDI - 4
		}
	</OUTPUT>
</RULE>
<!-- TODO: Are these right? -->
<RULE name="CMPS">
	<GRAMMAR>CMPSB | CMPSD</GRAMMAR>
</RULE>
<RULE name="CMPSB">
	<GRAMMAR>0xA6</GRAMMAR>
	<OUTPUT>temp := DS:SI - ES:DI
		EFLAGS[temp] := 1
		if (EFLAGS[DF] == 0)
		{
			ESI := ESI + 1
			EDI := EDI + 1
		}
		else
		{
			ESI := ESI - 1
			EDI := EDI - 1
		}
	</OUTPUT>
</RULE>
<RULE name="CMPSD">
	<GRAMMAR>0xA6</GRAMMAR>
	<OUTPUT>temp := DS:ESI - ES:EDI
		EFLAGS[temp] := 1
		if (EFLAGS[DF] == 0)
		{
			ESI := ESI + 4
			EDI := EDI + 4
		}
		else
		{
			ESI := ESI - 4
			EDI := EDI - 4
		}
	</OUTPUT>
</RULE>
<RULE name="SCAS">
	<GRAMMAR>SCASB | SCASD</GRAMMAR>
</RULE>
<RULE name="SCASB">
	<GRAMMAR>0xAE</GRAMMAR>
	<OUTPUT>temp := AL - ES:DI
		EFLAGS[temp] := 1
		if (EFLAGS[DF] == 0)
		{
		EDI := EDI + 1
		}
		else
		{
		EDI := EDI - 1
		}
	</OUTPUT>
</RULE>
<RULE name="SCASD">
	<GRAMMAR>0xAF</GRAMMAR>
	<OUTPUT>temp := EAX - ES:EDI
		EFLAGS[temp] := 1
		if (EFLAGS[DF] == 0)
		{
			EDI := EDI + 4
		}
		else
		{
			EDI := EDI - 4
		}
	</OUTPUT>
</RULE>
<RULE name="LODS">
	<GRAMMAR>LODSB | LODSD</GRAMMAR>
</RULE>
<RULE name="LODSB">
	<GRAMMAR>0xAC</GRAMMAR>
	<OUTPUT>AL := DS:SI
		if (EFLAGS[DF] == 0)
		{
			ESI := ESI + 1
		}
		else
		{
			ESI := ESI - 1
		}
	</OUTPUT>
</RULE>
<RULE name="LODSD">
	<GRAMMAR>0xAD</GRAMMAR>
	<OUTPUT>EAX := ES:EDI
		if (EFLAGS[DF] == 0)
		{
			ESI := ESI + 4
		}
		else
		{
			ESI := ESI - 4
		}
	</OUTPUT>
</RULE>
<RULE name="STOS">
	<GRAMMAR>STOSB | STOSD</GRAMMAR>
</RULE>
<RULE name="STOSB">
	<GRAMMAR>0xAA</GRAMMAR>
	<OUTPUT>ES:DI := AL
		if (EFLAGS[DF] == 0)
		{
			EDI := EDSI + 1
		}
		else
		{
			EDI := EDI - 1
		}
	</OUTPUT>
</RULE>
<RULE name="STOSD">
	<GRAMMAR>0xAB</GRAMMAR>
	<OUTPUT>ES:EDI := EAX
		if (EFLAGS[DF] == 0)
		{
			EDI := EDI + 4
		}
		else
		{
			EDI := EDI - 4
		}
	</OUTPUT>
</RULE>
<RULE name="REP">
	<GRAMMAR>REP_INS_BYTE |
		REP_INS_DWORD |
		REP_MOVS_BYTE |
		REP_MOVS_DWORD |
		REP_OUTS_BYTE |
		REP_OUTS_DWORD
	</GRAMMAR>
</RULE>
<RULE name="REP_INS_BYTE">
	<GRAMMAR>0xF3 0x6C</GRAMMAR>
	<OUTPUT>while (ECX != 0)
		{
			ES:DI := io_port[DX]
			if (EFLAGS[DF] == 0)
			{
				EDI := EDI + 1
			}
			else
			{
				EDI := EDI - 1
			}
			ECX := ECX - 1
		}
	</OUTPUT>
</RULE>
<RULE name="REP_INS_DWORD">
	<GRAMMAR>0xF3 0x6D</GRAMMAR>
	<OUTPUT>while (ECX != 0)
		{
			ES:EDI := io_port[DX]
			if (EFLAGS[DF] == 0)
			{
				EDI := EDI + 4
			}
			else
			{
				EDI := EDI - 4
			}
			ECX := ECX - 1
		}
	</OUTPUT>
</RULE>
<!-- ES:EDI or DS:ESI does not represent the size of data moved. Only the location -->
<!-- TODO: Denote ES:EDI format plus some size indication if important -->
<RULE name="REP_MOVS_BYTE">
	<GRAMMAR>0xF3 0xA4</GRAMMAR>
	<OUTPUT>while (ECX != 0)
		{
		ES:EDI := DS:ESI
		if (EFLAGS[DF] == 0)
		{
		EDI := EDI + 1
		ESI := ESI + 1
		}
		else
		{
		EDI := EDI - 1
		ESI := ESI - 1
		}
		}
	</OUTPUT>
</RULE>
<RULE name="REP_MOVS_DWORD">
	<GRAMMAR>0xF3 0xA5</GRAMMAR>
	<OUTPUT>while (ECX != 0)
		{
		ES:EDI := DS:ESI
		if (EFLAGS[DF] == 0)
		{
		EDI := EDI + 4
		ESI := ESI + 4
		}
		else
		{
		EDI := EDI - 4
		ESI := ESI - 4
		}
		}
	</OUTPUT>
</RULE>
<RULE name="REP_OUTS_BYTE">
	<GRAMMAR>0xF3 0x6E</GRAMMAR>
	<OUTPUT>while (ECX != 0)
		{
		io_port[DX] := DS:ESI
		if (EFLAGS[DF] == 0)
		{
		ESI := ESI + 1
		}
		else
		{
		ESI := ESI - 1
		}
		}
	</OUTPUT>
</RULE>
<RULE name="REP_OUTS_DWORD">
	<GRAMMAR>0xF3 0x6F</GRAMMAR>
	<OUTPUT>while (ECX != 0)
		{
			io_port[DX] := DS:ESI
			if (EF	LAGS[DF] == 0)
			{
				ESI := ESI + 4
			}
			else
			{
				ESI := ESI - 4
			}
		}
	</OUTPUT>
</RULE>
<RULE name="REP_LODS_BYTE">
	<GRAMMAR>0xF3 0xAC</GRAMMAR>
	<OUTPUT>while (ECX != 0)
		{
		AL := DS:ESI
		if (EFLAGS[DF] == 0)
		{
		ESI := ESI + 1
		}
		else
		{
		ESI := ESI - 1
		}
		}
	</OUTPUT>
</RULE>
<RULE name="REP_LODS_DWORD">
	<GRAMMAR>0xF3 0xAD</GRAMMAR>
	<OUTPUT>while (ECX != 0)
		{
		EAX := DS:ESI
		if (EF	LAGS[DF] == 0)
		{
		ESI := ESI + 4
		}
		else
		{
		ESI := ESI - 4
		}
		}
	</OUTPUT>
</RULE>

<!-- ******************************************* -->
<!--        CONTROL_TRANSFER_INSTRUCTIONS        -->
<!-- ******************************************* -->

<!-- NOTE: Not sure the OUTPUT for the JMP instructions are correct. -->
<RULE name="CONTROL_TRANSFER_INSTRUCTIONS">
	<GRAMMAR>JMP</GRAMMAR>
</RULE>
<RULE name="JMP">
	<GRAMMAR>JMP_SHORT |
		JMP_DIRECT |
		JMP_REGISTER_INDIRECT |
		JMP_DIRECT_INTERSEGMENT |
		JMP_INDIRECT_INTERSEGMENT
	</GRAMMAR>
</RULE>
<RULE name="JMP_SHORT">
	<GRAMMAR>0xEB BYTE</GRAMMAR>
	<OUTPUT>EIP := EIP + $BYTE.value</OUTPUT>
</RULE>
<RULE name="JMP_DIRECT">
	<GRAMMAR>0xE9 DWORD</GRAMMAR>
	<OUTPUT>EIP := EIP + $DWORD.value</OUTPUT>
</RULE>
<RULE name="JMP_REGISTER_INDIRECT">
	<GRAMMAR>0xFF MOD_RM(*,0x4,*)</GRAMMAR>
	<OUTPUT>EIP := register($MOD_RM.mod,$MOD_RM.rm,32)</OUTPUT>
</RULE>
<RULE name="JMP_DIRECT_INTERSEGMENT">
	<GRAMMAR>0xEA DWORD WORD</GRAMMAR>
	<OUTPUT>EIP := $WORD.value[$DWORD.value]</OUTPUT>
</RULE>
<RULE name="JMP_INDIRECT_INTERSEGMENT">
	<GRAMMAR>0xFF MOD_RM(*,0x5,*) DWORD WORD</GRAMMAR>
	<OUTPUT>EIP := seg_register($WORD.value)[$DWORD.value]</OUTPUT>
</RULE>

<!-- ******************************************* -->
<!--        BIT AND BYTE INSTRUCTIONS      -->
<!-- ******************************************* -->
<RULE name="BIT_BYTE_INSTRUCTIONS">
	<GRAMMAR>BT</GRAMMAR>
</RULE>
<RULE name="BT">
	<GRAMMAR>BT_GEN_DWORD_REG_WITH_REG |
		BT_GEN_DWORD_REG_WITH_BYTE
	</GRAMMAR>
</RULE>
<RULE name="BT_GEN_DWORD_REG_WITH_REG">
	<GRAMMAR>0x0F 0xA3 MOD_RM</GRAMMAR>
	<OUTPUT>EFLAGS[CF) := register($MOD_RM.rm,32)[register($MOD_RM.reg,32]]</OUTPUT>
</RULE>
<RULE name="BT_GEN_DWORD_REG_WITH_BYTE">
	<GRAMMAR>0x0F 0xBA MOD_RM(*,0x4,*) BYTE</GRAMMAR>
	<OUTPUT>EFLAGS[CF) := register($MOD_RM.rm,32][$BYTE.value]</OUTPUT>
</RULE>

<!-- ******************************************* -->
<!--        SHIFT AND ROTATION INSTRUCTIONS      -->
<!-- ******************************************* -->
<RULE name="SHIFT_ROTATION_INSTRUCTIONS">
	<GRAMMAR>SHIFT_ROTATION_INSTRUCTIONS := SAR</GRAMMAR>
</RULE>
<RULE name="SAR">
	<GRAMMAR>SAR_BH_DIVIDE_ONCE |
		SAR_BH_DIVIDE_BY_CL_TIMES |
		SAR_BH_DIVIDE_BY_BYTE_TIMES
	</GRAMMAR>
</RULE>
<RULE name="SAR_BH_DIVIDE_ONCE">
	<GRAMMAR>0xD0 MOD_RM(*,0x7,*)</GRAMMAR>
	<OUTPUT>register($MOD_RM.reg,8) := register($MOD_RM.reg,8) / 2</OUTPUT>
</RULE>
<RULE name="SAR_BH_DIVIDE_BY_CL_TIMES">
	<GRAMMAR>0xD2 MOD_RM(*,0x7,*)</GRAMMAR>
	<OUTPUT>register($MOD_RM.reg,8) := register($MOD_RM.reg,8) / register(1,8)</OUTPUT>
</RULE>

<RULE name="SAR_BH_DIVIDE_BY_BYTE_TIMES">
	<GRAMMAR>0xC0 MOD_RM(*,0x7,*) BYTE</GRAMMAR>
	<OUTPUT>register($MOD_RM.reg,8) := register($MOD_RM.reg,8) / register(1,8)</OUTPUT>
</RULE>

<!-- ******************************************* -->
<!--        LOGICAL INSTRUCTIONS                 -->
<!-- ******************************************* -->
<RULE name="LOGICAL_INSTRUCTIONS">
	<GRAMMAR>LOGICAL_INSTRUCTIONS := AND</GRAMMAR>
</RULE>
<RULE name="AND">
	<GRAMMAR>AND_BYTE_WITH_AL |
		 AND_WORD_WITH_AX |
		 AND_WORD_WITH_EAX
	</GRAMMAR>
</RULE>
<RULE name="AND_BYTE_WITH_AL">
	<GRAMMAR>0x24 BYTE</GRAMMAR>
	<OUTPUT>register(0,8) := register(0,8) & $BYTE.value</OUTPUT>
</RULE>
<RULE name="AND_BYTE_WITH_AX">
	<GRAMMAR>0x25 WORD</GRAMMAR>
	<OUTPUT>register(0,16) := register(0,16) & $WORD.value</OUTPUT>
</RULE>
<RULE name="AND_BYTE_WITH_EAX">
	<GRAMMAR>0x26 DWORD</GRAMMAR>
	<OUTPUT>register(0,32) := register(0,32) & $DWORD.value</OUTPUT>
</RULE>

<!-- ******************************************* -->
<!--          DECIMAL ARITHMETIC INSTRUCTIONS    -->
<!-- ******************************************* -->
<RULE name="DECIMAL_ARITHMETIC_INSTRUCTIONS">
	<GRAMMAR>DECIMAL_ARITHMETIC_INSTRUCTIONS := DAA</GRAMMAR>
</RULE>
<RULE name="DAA">
	<GRAMMAR>0x27</GRAMMAR>
	<OUTPUT>
		if ( (register(0,8) & 0x0F) > 9 || ( EFLAGS[AF) == 1 ) ]
		{
			register(0,8) := register(0,8) + 0x6
			EFLAGS[AF] := 1
		}

		if ( (register(0,8) > 0x9F) || ( EFLAGS[CF) == 1) ]
		{
			register(0,8) := register(0,8) + 0x60
			EFLAGS[CF] := 1
		}
	</OUTPUT>
</RULE>

<!-- ******************************************* -->
<!--          DATA TRANSFER INSTRUCTIONS         -->
<!-- ******************************************* -->
<RULE name="DATA_TRANSFER_INSTRUCTIONS">
	<GRAMMAR>DATA_TRANSFER_INSTRUCTIONS := MOV</GRAMMAR>
</RULE>
<RULE name="MOV">
	<GRAMMAR>MOV_BYTE_TO_REG |
			MOV_WORD_TO_GEN_REG |
			MOV_GEN_REG_TO_BYTE |
			MOV_GEN_REG_TO_WORD |
			MOV_SREG_TO_GEN_REG |
			MOV_GEN_REG_TO_SREG
	</GRAMMAR>
</RULE>
<RULE name="MOV_BYTE_TO_GEN_REG">
	<GRAMMAR>0x88 MOD_RM</GRAMMAR>
	<OUTPUT>register($MOD_RM.rm,8) := register($MOD_RM.reg,8)</OUTPUT>
</RULE>
<RULE name="MOV_WORD_TO_GEN_REG">
	<GRAMMAR>0x89 MOD_RM</GRAMMAR>
	<OUTPUT>effective_32addr($MOD_RM.mod,$MOD_RM.rm,32) := register($MOD_RM.reg,32)</OUTPUT>
</RULE>
<RULE name="MOV_GEN_REG_TO_BYTE">
	<GRAMMAR>0x8A MOD_RM</GRAMMAR>
	<OUTPUT>register($MOD_RM.reg,8) := register($MOD_RM.rm,8)</OUTPUT>
</RULE>
<RULE name="MOV_GEN_REG_TO_WORD">
	<GRAMMAR>0x8B MOD_RM</GRAMMAR>
	<OUTPUT>register($MOD_RM.reg,32) := effective_32addr($MOD_RM.mod,$MOD_RM.rm,32)</OUTPUT>
</RULE>
<RULE name="MOV_SREG_TO_GEN_REG">
	<GRAMMAR>0x8C MOD_RM</GRAMMAR>
	<OUTPUT>effective_32addr($MOD_RM.mod,$MOD_RM.rm,16) := seg_register($MOD_RM.reg)</OUTPUT>
</RULE>
<RULE name="MOV_GEN_REG_TO_SREG">
	<GRAMMAR>0x8E MOD_RM</GRAMMAR>
	<OUTPUT>seg_register($MOD_RM.reg) := effective_32addr($MOD_RM.mod,$MOD_RM.rm,16)</OUTPUT>
</RULE>

<!-- ******************************************* -->
<!--          BDATA TRANSFER INSTRUCTIONS         -->
<!-- ******************************************* -->
<RULE name="BINARY_ARITHMETIC_INSTRUCTIONS">
	<GRAMMAR>ADD</GRAMMAR>
</RULE>
<RULE name="ADD">
	<GRAMMAR>ADD_BYTE_TO_GEN_REG |
			ADD_DWORD_TO_GEN_REG |
			ADD_GEN_REG_TO_BYTE |
			ADD_GEN_REG_TO_DWORD |
			ADD_BYTE_TO_AL |
			ADD_DWORD_TO_EAX |
			ADD_IMMEDIATE_BYTE_TO_GEN_REG |
			ADD_IMMEDIATE_DWORD_TO_GEN_REG |
			ADD_SIGNED_IMMEDIATE_BYTE_TO_GEN_REG
	</GRAMMAR>
</RULE>
<RULE name="ADD_BYTE_TO_GEN_REG">
	<GRAMMAR>0x00 MOD_RM</GRAMMAR>
	<OUTPUT>register($MOD_RM.rm, 8) :=
		register($MOD_RM.rm, 8) +
		register($MOD_RM.reg, 8)
	</OUTPUT>
</RULE>
<RULE name="ADD_DWORD_TO_GEN_REG">
	 <GRAMMAR>0x01 MOD_RM</GRAMMAR>
	 <OUTPUT>effective_32addr($MOD_RM.mod, $MOD_RM.rm,32) :=
		 effective_32addr($MOD_RM.mod, $MOD_RM.rm,32)
		 register($MOD_RM.reg,32)</OUTPUT>
</RULE>
<RULE name="ADD_GEN_REG_TO_BYTE">
	<GRAMMAR>0x02 MOD_RM</GRAMMAR>
	<OUTPUT>register($MOD_RM.reg, 8) :=
		register($MOD_RM.reg, 8) +
		register($MOD_RM.rm, 8)</OUTPUT>
</RULE>
<RULE name="ADD_GEN_REG_TO_DWORD">
	<GRAMMAR>0x03 MOD_RM</GRAMMAR>
	<OUTPUT>effective_32addr($MOD_RM.reg,32) :=
		effective_32addr($MOD_RM.reg,32)
		register($MOD_RM.rm,16)</OUTPUT>
</RULE>
<RULE name="ADD_BYTE_TO_AL">
	<GRAMMAR>0x04 BYTE</GRAMMAR>
	<OUTPUT>register(0,8) := register(0,8) + $BYTE.value</OUTPUT>
</RULE>
<RULE name="ADD_DWORD_TO_EAX">
	<GRAMMAR>0x05 DWORD</GRAMMAR>
	<OUTPUT>register(0,32) := register(0,32) + $DWORD.value</OUTPUT>
</RULE>
<RULE name="ADD_IMMEDIATE_BYTE_TO_GEN_REG">
	<GRAMMAR>0x80 MOD_RM BYTE</GRAMMAR>
	<OUTPUT>effective_32addr($MOD_RM.mod,$MOD_RM.rm,8) :=
		effective_32addr($MOD_RM.mod,$MOD_RM.rm,8)
		$BYTE.value</OUTPUT>
</RULE>
<RULE name="ADD_IMMEDIATE_DWORD_TO_GEN_REG">
	<GRAMMAR>0x81 MOD_RM DWORD</GRAMMAR>
	<OUTPUT>effective_32addr($MOD_RM.mod,$MOD_RM.rm,32) :=
		effective_32addr($MOD_RM.mod,$MOD_RM.rm,32)
		$DWORD.value</OUTPUT>
</RULE>
<RULE name="ADD_SIGNED_IMMEDIATE_BYTE_TO_GEN_REG">
	<GRAMMAR>0x83 MOD_RM BYTE</GRAMMAR>
	<OUTPUT>effective_32addr($MOD_RM.mod,$MOD_RM.rm,32) :=
		effective_32addr($MOD_RM.mod,$MOD_RM.rm,32)
		$BYTE.value</OUTPUT>
</RULE>
</RULE_SET>
