#ifndef INTERNAL_EXCEPTION_H_
#define INTERNAL_EXCEPTION_H_

#include "Reverse_Exception.h"
#include <boost/shared_ptr.hpp>

namespace libreverse { namespace errors {

  class Internal_Exception : virtual public Reverse_Exception
  {
  public:

    enum Values {
        EMPTY_STRING,
        INVALID_VALUE,
        NULL_POINTER,
        BAD_ALLOC,
        UNSUPPORTED_FEATURE,
        IO_ERROR
    };

    Internal_Exception ( boost::uint32_t message_id );

    /*!
     * \brief Destructor
     */
    virtual ~Internal_Exception (void) throw(){}

    /*!
     * \brief Return the extra message accompanying the exception.
     */
    const char* what (void) const throw ();

    /*!
     * \brief Return tne name of the exception
     */
    const char* name (void) const throw();

  private:

    static const char* m_exception_name;

    static const char* m_messages[];
  };

} /* namespace errors */
} /* namespace libreverse */
#endif /* INTERNAL_EXCEPTION_H_ */
