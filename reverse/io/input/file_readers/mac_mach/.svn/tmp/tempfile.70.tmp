//
// C++ Interface: CPU_State
//
// Description:
//
//
// Author: Stephen Torri,,, <storri@torri.org>, (C) 2007
//
// Copyright: See COPYING file that comes with this distribution
//
//
#ifndef CPU_STATE_H
#define CPU_STATE_H

#include <map>
#include <string>
#include "CPU_Thread_State.h"

namespace libreverse
{
    namespace mach_module
    {
        template <typename Register_Type>
        class CPU_State : public CPU_Thread_State
        {
            public:

                /*!
                 * \brief Return the value stored in the target register
                 *
                 * \param index Unsigned integer denoting the target register
                 *
                 * \exception IO_Exception(INVALID_INDEX) Thrown when index value is outside the acceptable range.
                 *
                 * \return Value stored in register
                 */
                typename Register_Type::data_type read_Register ( boost::uint32_t index );

                /*!
                 * \brief Store the value in the target register
                 *
                 * \param index Unsigned integer denoting the target register
                 * \param value Value to be stored at register position
                 *
                 * \exception IO_Exception(INVALID_INDEX) Thrown when index value is outside the acceptable range.
                 */
                void set_Register ( boost::uint32_t index, typename Register_Type::data_type value );

                /*!
                 * \brief Return the register name for the given index
                 *
                 * \param index Unsigned integer index for the target register
                 *
                 * \exception IO_Exception(INVALID_INDEX) Exception thrown for invalid index.
                 *
                 * \return Register string name
                 */
                std::string get_Register_Name ( boost::uint32_t index );

                /*!
                 * \brief Return a formatted string representation of the CPU state
                 *
                 * \return Formatted output string of CPU state
                 */
                virtual std::string to_String ();

                /*!
                 * \brief Convert the byte order of register values
                 *
                 * \param need_convert TRUE it is necessary to convert the byte_order otherwise nothing is done
                 */
                virtual void convert ( bool need_convert );

            private:

                typedef std::map<boost::uint32_t, typename Register_Type::data_type> Map_t;
                Map_t m_data;

                /*!
                 * \brief Functor that is applied to each value in the CPU state to convert the byte order
                 *
                 * \param obj Value stored in target register
                 */
                static void convert_entry ( typename Map_t::value_type & obj );
        };
    }
}

#include "CPU_State_T.cpp"

#endif /* CPU_THREAD_STATE */
