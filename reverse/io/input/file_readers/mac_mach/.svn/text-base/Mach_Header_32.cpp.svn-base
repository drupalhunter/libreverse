/*  Mach_Header_32.cpp

   Copyright (C) 2008 Stephen Torri

   This file is part of Libreverse.

   Libreverse is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published
   by the Free Software Foundation; either version 3, or (at your
   option) any later version.

   Libreverse is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see
   <http://www.gnu.org/licenses/>.
*/

#include "Mach_Header_32.h"
#include <boost/format.hpp>
#include <sstream>
#include <string>
#include "libreverse/io/Output.h"
#include "libreverse/io/Byte_Converter.h"
#include "CPU_Type.h"

namespace libreverse
{
    namespace mach_module
    {

        //--------------------------------------
        //        32-bit Mach_Header_32
        //--------------------------------------
        Mach_Header_32::Mach_Header_32()
                : m_magic ( 0 ),
                m_cputype ( CPU_Type::CPU_TYPE_ANY ),
                m_cpusubtype ( 0 ),
                m_filetype ( 0 ),
                m_ncmds ( 0 ),
                m_sizeofcmds ( 0 ),
                m_flags ( 0 )
        {}

        std::string
        Mach_Header_32::to_String ( void )
        {
            std::stringstream output;

            output << "Mach_Header_32" << std::endl
            << io::Output::indent ( 2 ) << boost::format ( "Magic: %1$8X" ) % m_magic << std::endl
            << io::Output::indent ( 2 ) << boost::format ( "CPU type: %1$8X" ) % m_cputype << std::endl
            << io::Output::indent ( 2 ) << boost::format ( "CPU sub-type: %1$8X" ) % m_cpusubtype << std::endl
            << io::Output::indent ( 2 ) << boost::format ( "File type: %1$8X" ) % m_filetype << std::endl
            << io::Output::indent ( 2 ) << boost::format ( "Command count: %1$8X ( %2$d )" ) % m_ncmds % m_ncmds << std::endl
            << io::Output::indent ( 2 ) << boost::format ( "Command size: %1$8X ( %2$d )" ) % m_sizeofcmds % m_sizeofcmds << std::endl
            << io::Output::indent ( 2 ) << boost::format ( "Flags: %1$8X ( %2$d )" ) % m_flags % m_flags << std::endl;

            return output.str();
        }


        bool
        Mach_Header_32::is_Mach_File ( void ) const
        {

            bool result = false;

            if ( ( m_magic == MH_MAGIC ) ||
                    ( m_magic == MH_CIGAM ) )
            {
                result = true;
            }

            return result;
        }

        void
        Mach_Header_32::convert ( void )
        {
            io::Byte_Converter::convert ( m_magic );
            io::Byte_Converter::convert ( m_cputype );
            io::Byte_Converter::convert ( m_cpusubtype );
            io::Byte_Converter::convert ( m_filetype );
            io::Byte_Converter::convert ( m_ncmds );
            io::Byte_Converter::convert ( m_sizeofcmds );
            io::Byte_Converter::convert ( m_flags );
        }

        bool
        Mach_Header_32::needs_Convert ( void ) const
        {
            bool result = true;

            if ( m_magic == MH_MAGIC )
            {
                result = false;
            }

            return result;
        }

        boost::uint32_t
        Mach_Header_32::get_Magic ( void ) const
        {
            return m_magic;
        }

        boost::uint32_t
        Mach_Header_32::get_Cputype ( void ) const
        {
            return m_cputype;
        }

        boost::uint32_t
        Mach_Header_32::get_CpuSubtype ( void ) const
        {
            return m_cpusubtype;
        }

        boost::uint32_t
        Mach_Header_32::get_Filetype ( void ) const
        {
            return m_filetype;
        }

        boost::uint32_t
        Mach_Header_32::get_Load_Command_Count ( void ) const
        {
            return m_ncmds;
        }

        boost::uint32_t
        Mach_Header_32::get_Command_Size ( void ) const
        {
            return m_sizeofcmds;
        }

        boost::uint32_t
        Mach_Header_32::get_Flags ( void ) const
        {
            return m_flags;
        }

    } /* namespace mach_module */
} /* namespace libreverse */
