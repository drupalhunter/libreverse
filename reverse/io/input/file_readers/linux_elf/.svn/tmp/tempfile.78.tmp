#include "Elf_cris.h"
#include <iostream>
#include "libreverse/Trace.h"

using namespace libreverse::api;
using namespace libreverse::trace;

namespace libreverse { namespace elf_module {

    inline std::string
    Elf_cris::get_Type ( boost::uint32_t type )
    {
        Trace::write_Trace ( TraceArea::IO,
                             TraceLevel::DETAIL,
                             "Entering Elf_cris::get_Type" );

        std::string output = "";

        switch (type)
            {
                /* Relocations.  */
            case 0: output = "R_CRIS_NONE"; break;
            case 1: output = "R_CRIS_8"; break;
            case 2: output = "R_CRIS_16"; break;
            case 3: output = "R_CRIS_32"; break;

                /* The "PC" position is the location right after the relocation.  */
            case 4: output = "R_CRIS_8_PCREL"; break;
            case 5: output = "R_CRIS_16_PCREL"; break;
            case 6: output = "R_CRIS_32_PCREL"; break;

            case 7: output = "R_CRIS_GNU_VTINHERIT"; break;
            case 8: output = "R_CRIS_GNU_VTENTRY"; break;

                /* Copy contents at dynlinking.  Generated by the linker.
                   The BFD equivalent is BFD_RELOC_CRIS_COPY.  */
            case 9: output = "R_CRIS_COPY"; break;

                /* Create GOT entry.  Generated by the linker.
                   The BFD equivalent is BFD_RELOC_CRIS_GLOB_DAT.  */
            case 10: output = "R_CRIS_GLOB_DAT"; break;

                /* Create PLT entry.  Generated by the linker.
                   The BFD equivalent is BFD_RELOC_CRIS_JUMP_SLOT.  */
            case 11: output = "R_CRIS_JUMP_SLOT"; break;

                /* Adjust by program base.  Generated by the linker.
                   The BFD equivalent is BFD_RELOC_CRIS_RELATIVE.  */
            case 12: output = "R_CRIS_RELATIVE"; break;

                /* A 16-bit offset to entry in GOT and request to create GOT entry for
                   that symbol.
                   The BFD equivalent is BFD_RELOC_CRIS_16_GOT.  */
            case 13: output = "R_CRIS_16_GOT"; break;

                /* A 32-bit offset to entry in GOT and request to create GOT entry for
                   that symbol.
                   The BFD equivalent is BFD_RELOC_CRIS_32_GOT.  */
            case 14: output = "R_CRIS_32_GOT"; break;

                /* A 16-bit offset to entry in PLT part of GOT and request to create PLT
                   entry for that symbol.
                   The BFD equivalent is BFD_RELOC_CRIS_16_GOTPLT.  */
            case 15: output = "R_CRIS_16_GOTPLT"; break;

                /* A 32-bit offset to entry in PLT part of GOT and request to create PLT
                   entry for that symbol.
                   The BFD equivalent is BFD_RELOC_CRIS_32_GOTPLT.  */
            case 16: output = "R_CRIS_32_GOTPLT"; break;

                /* A 32-bit offset from GOT to (local) symbol: no GOT entry should be
                   necessary.
                   The BFD equivalent is BFD_RELOC_CRIS_32_GOTREL.  */
            case 17: output = "R_CRIS_32_GOTREL"; break;

                /* A 32-bit offset from GOT to entry for this symbol in PLT and request
                   to create PLT entry for symbol.
                   The BFD equivalent is BFD_RELOC_CRIS_32_GOTREL.  */
            case 18: output = "R_CRIS_32_PLT_GOTREL"; break;

                /* A 32-bit offset from location after this relocation (addend specifies
                   offset) to entry for this symbol in PLT and request to create PLT
                   entry for symbol.
                   The BFD equivalent is BFD_RELOC_CRIS_32_PLT_PCREL.  */
            case 19: output = "R_CRIS_32_PLT_PCREL"; break;

                /* No other relocs must be visible outside the assembler.  */
            default:
                {
                    std::cerr << "Unknown cris relocation type:" << type << std::endl;
                    output = "unknown";
                }
            }

        Trace::write_Trace ( TraceArea::IO,
                             TraceLevel::DETAIL,
                             "Exiting Elf_cris::get_Type" );

        return output;
    }
} /* namespace elf_module */
} /* namespace libreverse */
