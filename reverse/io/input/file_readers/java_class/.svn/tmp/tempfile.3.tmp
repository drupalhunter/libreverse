#ifndef JAVA_CLASS_HEADER_H_
#define JAVA_CLASS_HEADER_H_

#include <string>
#include "libreverse/io/input/File_Readers/Base_Header.h"
#include "libreverse/io/IO_Types.h"
#include "Java_Types.h"
#include <map>
#include <vector>

/* Comments for the variables in the class are taken from
   T. Lindholm and F. Yellin
   The Java Virtual Machine Specification Second Edition
   Sun Microsystems
   1999
*/

namespace libreverse { namespace java_module {

    /*!
     * \class Class_Header
     * \date 2003
     * \author Stephen Torri
     */
    class Class_Header : public header::Base_Header {
    public:

        friend class Class_File;

        static boost::uint32_t const CLASS_MAGIC_SIGNATURE;

        /*!
         * \brief Default Constructor
         */
        Class_Header();

        /*!
         * \brief Default Destructor
         */
        virtual ~Class_Header(){}

        /*!
         * \brief Get header bit size
         * \return Unsigned integer representation of bit size
         */
        virtual boost::uint32_t get_size (void) const;

        /*!
         * \brief Change the bit-ordering if required
         */
        virtual void convert ();

        /*!
         * \brief String representation of JAVA Header
         * \return String output of header
         */
        std::string to_String (void) const;

        bool is_Java_File (void) const;

        std::string get_String_Constant ( boost::uint16_t val ) const;

        boost::uint32_t get_Magic_Number() const;

        boost::uint16_t get_Minor_Version () const;

        boost::uint16_t get_Major_Version () const;

        boost::uint16_t get_Constant_Pool_Count () const;

        java_types::Class_Header::Constant_Pool_Info_Map_t::const_iterator
        get_Constant_Pool_Begin() const;

        java_types::Class_Header::Constant_Pool_Info_Map_t::const_iterator
        get_Constant_Pool_End() const;

        java_types::Class_Header::Constant_Pool_Info_Map_t::const_iterator
        get_Constant_Pool_Item ( boost::uint16_t index );

        boost::uint16_t get_Access_Flags() const;

        boost::uint16_t get_This_Class() const;

        boost::uint16_t get_Super_Class() const;

        boost::uint16_t get_Interfaces_Count () const;

        java_types::Class_Header::Interfaces_List_t::const_iterator get_Interfaces_Begin() const;

        java_types::Class_Header::Interfaces_List_t::const_iterator get_Interfaces_End() const;

        boost::uint16_t get_Field_Count () const;

        java_types::Class_Header::Field_Info_Map_t::const_iterator get_Field_Begin() const;

        java_types::Class_Header::Field_Info_Map_t::const_iterator get_Field_End() const;

        boost::uint16_t get_Method_Count () const;

        java_types::Class_Header::Method_Info_Map_t::const_iterator get_Method_Begin() const;

        java_types::Class_Header::Method_Info_Map_t::const_iterator get_Method_End() const;

        boost::uint16_t get_Attribute_Count () const;

        java_types::Class_Header::Attribute_Info_Map_t::const_iterator get_Attribute_Begin() const;

        java_types::Class_Header::Attribute_Info_Map_t::const_iterator get_Attribute_End() const;

        io_types::Text_Data::data_type get_Text_Strings() const;

        io_types::Text_Data::unicode_data_type get_Raw_Strings() const;

    private:

        /*!
         * \brief The magic item supplies the magic number
         * identifying the class file format.
         */
        boost::uint32_t m_magic;

        /*!
         * \brief The values of the minor_version and major_version
         * items are the minor and major version numbers of this class
         * file. Together, a major and minor version number determine
         * the version of the class file format. If a class file has
         * major version number M and a minor version number m, we
         * denote the version of its class file format as M.m.
         */
        boost::uint16_t m_minor_version;
        boost::uint16_t m_major_version;

        /*!
         * \brief The value of the constant_pool_count item is equal
         * to the number of entries in the constant_pool table plus
         * one.
         */
        boost::uint16_t m_constant_pool_count;

        /*!
         * \brief The constant_pool is a table of structures
         * representing various string constants, class, and interface
         * names, field names, and other constants that are referred
         * to within the ClassFile structure.
         */
        java_types::Class_Header::Constant_Pool_Info_Map_t m_constant_pool;

        /*!
         * \brief The value of the access_flags item is a mask of
         * flags used to denote access permissions to and properties
         * of this class or interface.
         */
        boost::uint16_t m_access_flags;

        /*!
         * \brief The value of this_class item must be a valid index
         * into the constant_pool table. The constant_pool entry at
         * that index must be a CONSTANT_Class_info structure
         * representing the class or interface defined by this class
         * file.
         */
        boost::uint16_t m_this_class;

        /*!
         * \brief For a class, the value of the super_class item
         * either must be zero or must be a valid index into the
         * constant_pool table. If the value is non-zero, the
         * constant_pool entry at that index must be a
         * CONSTANT_Class_info structure representing the direct
         * superclass of teh class defined by this class file. Neither
         * the direct superclass nor any of its superclasses may be a
         * final class.  interface defined by this class file.
         */
        boost::uint16_t m_super_class;

        /*!
         * \brief The value of the interfaces_count item gives the
         * number of direct superinterfaces of this class or interface
         * type.
         */
        boost::uint16_t m_interfaces_count;

        /*!
         * \brief Each value in the interfaces array must be a valid
         * index into the constant_pool table.
         */
        java_types::Class_Header::Interfaces_List_t m_interfaces;

        /*!
         * \brief The value of the fields_count item gives the number
         * of field_info structures in the fields table.
         */
        boost::uint16_t m_field_count;

        /*!
         * \brief Each value in the fields table must be a field_info
         * structure giving a complete description of a field in this
         * class or interface.
         */
        java_types::Class_Header::Field_Info_Map_t m_fields;

        /*!
         * \brief The value of the methods_count item gives the number
         * of method_info structures in the methods table.
         */
        boost::uint16_t m_methods_count;

        /*!
         * \brief Each value in the methods table must be a
         * method_info structure giving a complete description of a
         * method in this class or interface.
         */
        java_types::Class_Header::Method_Info_Map_t m_methods;

        /*!
         * \brief The value of the attributes_count item gives the
         * number of attribute_info structures in the attributes
         * table.
         */
        boost::uint16_t m_attributes_count;

        /*!
         * \brief Each value in the attributes table must be a
         * attribute_info structure giving a complete description of a
         * attribute in this class or interface.
         */
        java_types::Class_Header::Attribute_Info_Map_t m_attributes;

    };

} /* namespace java_module */
} /* namespace libreverse */

#endif /* JAVA_CLASS_HEADER_H_ */
