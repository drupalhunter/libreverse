#ifndef HEADER_H_
#define HEADER_H_

#include <boost/shared_ptr.hpp>
#include <string>
#include "libreverse/io/input/File_Readers/Base_Header.h"
#include <vector>
#include "PE_Types.h"

namespace libreverse { namespace wpef_module {

   
    /*!
     * \class Header
     * \date 2003
     * \author Stephen Torri
     */
    template <boost::uint32_t bitsize>
    class Header : public header::Base_Header {

    public:


        /*!
         * \brief Default Constructor
         */
        Header();

        /*!
         * \brief Default Destructor
         */
        virtual ~Header();

        /*!
         * \brief Get header bit size
         * \return Unsigned integer representation of bit size
         */
        virtual boost::uint32_t get_size (void) const;

        /*!
         * \brief Change the bit-ordering if required
         */
        virtual void convert ();

        /*!
         * \brief String representation of WPEF Header
         * \return String output of header
         */
        std::string to_String (void);

        /*!
         * \brief Get the human readable strings from the header
         * \return String output of header
         */
        void get_Text_String ( io_types::Text_Data::data_type* output );

        /*-----------------------------*/
        /*        DOS HEADER           */
        /*-----------------------------*/
        typename wpef_types::DOS_Header::ptr_t get_DOS_Header (void) const;

        void set_DOS_Header ( typename wpef_types::DOS_Header::ptr_t hdr );

        /*-----------------------------*/
        /*        PE HEADER            */
        /*-----------------------------*/

        typename wpef_types::PE_Header<bitsize>::ptr_t get_PE_Header (void) const;

        void set_PE_Header ( typename wpef_types::PE_Header<bitsize>::ptr_t hdr );

        /*-----------------------------*/
        /*       SECTION HEADER        */
        /*-----------------------------*/

        /*
         * Return the iterator pointing to the PE Section Header. If
         * an incorrect name has been given the iterator will point to
         * the end of the PE Section Header list.
         */
        typename wpef_types::Header<bitsize>::Section_Header_Map_t::const_iterator get_PE_Section_Header ( std::string name ) const;

        boost::uint32_t get_PE_Section_Header_Count (void) const;

        void set_PE_Section_Header ( typename wpef_types::PE_Section_Header::ptr_t hdr );

        typename wpef_types::Header<bitsize>::Section_Header_Map_t::const_iterator
		get_PE_Section_Header_List_Begin () const;

        typename wpef_types::Header<bitsize>::Section_Header_Map_t::const_iterator
		get_PE_Section_Header_List_End () const;

        /*-----------------------------*/
        /*      RESOURCE DIRECTORY     */
        /*-----------------------------*/

	    void set_Resource_Directory ( wpef_types::PE_Resource_Directory::ptr_t r_ptr );

        /*-----------------------------*/
        /*      EXPORT DIRECTORY       */
        /*-----------------------------*/
	    void set_Export_Directory ( wpef_types::PE_Export_Directory::ptr_t exp_ptr );

        typename wpef_types::PE_Export_Directory::ptr_t get_Export_Directory () const;

        /*-----------------------------*/
        /*      IMPORT DIRECTORY       */
        /*-----------------------------*/

	    void add_Import_Directory ( wpef_types::PE_Import_Directory::ptr_t exp_ptr );

        boost::uint32_t get_PE_Import_Directory_Count (void) const;

        typename wpef_types::Header<bitsize>::Import_Directory_List_t::iterator get_PE_Import_Directory_List_Begin ();

        typename wpef_types::Header<bitsize>::Import_Directory_List_t::iterator get_PE_Import_Directory_List_End ();

        typename wpef_types::Header<bitsize>::Import_Directory_List_t::const_iterator get_PE_Import_Directory_List_Begin () const;

        typename wpef_types::Header<bitsize>::Import_Directory_List_t::const_iterator get_PE_Import_Directory_List_End () const;

        /*-----------------------------*/
        /*       DEBUG DIRECTORY       */
        /*-----------------------------*/

	    void set_Debug_Directory ( wpef_types::PE_Debug_Directory::ptr_t r_ptr );

	    wpef_types::PE_Debug_Directory::ptr_t get_Debug_Directory ( void ) const;

        /*-----------------------------*/
        /*    LOAD CONFIG DIRECTORY    */
        /*-----------------------------*/

	    void set_Load_Config_Directory ( wpef_types::PE_Load_Config_Directory::ptr_t r_ptr );

        wpef_types::PE_Resource_Directory::ptr_t get_PE_Resource_Directory ( void );

        /*-----------------------------*/
        /*    EXCEPTION TABLE LIST     */
        /*-----------------------------*/
	    void add_Exception_Table_Entry ( typename wpef_types::PE_Exception_Table_Entry<bitsize>::ptr_t exp_ptr );

        boost::uint32_t get_PE_Exception_Table_Entry_Count (void) const;

        typename wpef_types::Header<bitsize>::Exception_Table_List_t::iterator get_PE_Exception_Table_List_Begin ();

        typename wpef_types::Header<bitsize>::Exception_Table_List_t::iterator get_PE_Exception_Table_List_End ();

        typename wpef_types::Header<bitsize>::Exception_Table_List_t::const_iterator get_PE_Exception_Table_List_Begin () const;

        typename wpef_types::Header<bitsize>::Exception_Table_List_t::const_iterator get_PE_Exception_Table_List_End () const;

    private:

        /* Variables */

        /*! \brief WPEF DOS Header */
        wpef_types::DOS_Header::ptr_t m_dos_hdr;

        /*! \brief WPEF PE Header */
        typename wpef_types::PE_Header<bitsize>::ptr_t m_pe_hdr;

        /*! \brief List of PE Section Headers */
        typename wpef_types::Header<bitsize>::Section_Header_Map_t m_sec_hdrs;

        /*! \brief PE Resource Directories */
        wpef_types::PE_Resource_Directory::ptr_t m_res_ptr;

        /*! \brief PE Export Directories */
        wpef_types::PE_Export_Directory::ptr_t m_export_dir_ptr;

        /*! \brief PE Import Directories */
        typename wpef_types::Header<bitsize>::Import_Directory_List_t m_import_dir_list;

        /*! \brief PE Debug Directories */
        wpef_types::PE_Debug_Directory::ptr_t m_debug_ptr;

        /*! \brief PE Load_Config Directories */
        wpef_types::PE_Load_Config_Directory::ptr_t m_load_config_ptr;

        /*! \brief PE Exception Table entries */
        typename wpef_types::Header<bitsize>::Exception_Table_List_t m_exception_list;

    };

} /* namespace wpef_module */
} /* namespace libreverse */

#include "Header_T.cpp"

#endif /* HEADER_H_ */
