#ifndef PE_RESOURCE_DIRECTORY_H_
#define PE_RESOURCE_DIRECTORY_H_

/*
  All comments and hexidecimal values in this header, marked with
  MS_PE_COFF, are taken from the Microsoft Portable Executable and //
  Common Object File Format - Revision 8, May 16, 2006.
*/

#include <boost/shared_ptr.hpp>
#include <boost/cstdint.hpp>
#include <string>
#include <vector>
#include "libreverse/io/input/File_Readers/Base_Header.h"
#include "PE_Types.h"

namespace libreverse { namespace wpef_module {

    class PE_Resource_Directory : public libreverse::header::Base_Header {
    public:

        friend class PE_File<32>;
        friend class PE_File<64>;

        //-------------------------------
        //     LEVEL TYPES
        //-------------------------------
        static boost::uint8_t const TYPE_LEVEL;
        static boost::uint8_t const NAME_LEVEL;
        static boost::uint8_t const LANGUAGE_LEVEL;

        /*!
         * \brief Default Constructor
         */
        PE_Resource_Directory ( boost::uint8_t level = TYPE_LEVEL );

        /*!
         * \brief Default Destructor
         */
        virtual ~PE_Resource_Directory(){}

        /*!
         * \brief Convert the header data into a string representation
         * \return String representation of header data
         */
        virtual std::string to_String (void);

        /*!
         * \brief Convert the bit order of the stored data
         */
        virtual void convert ();

        virtual boost::uint32_t get_size(void) const;

        boost::uint16_t get_Number_Of_Name_Entries (void) const;

        boost::uint16_t get_Number_Of_Id_Entries (void) const;

        void add_Directory ( wpef_types::PE_Resource_Directory::ptr_t dir_ptr );

        void add_Data ( wpef_types::PE_Resource_Data_Entry::ptr_t data_ptr );

        void set_Name ( std::string name );

        void set_ID ( boost::uint32_t id );

        boost::uint8_t get_Level (void) const;


        wpef_types::PE_Resource_Directory::Data_List_t::const_iterator get_Data_Begin (void) const;

        wpef_types::PE_Resource_Directory::Data_List_t::const_iterator get_Data_End (void) const;

    private:

        /* MS_PE_COFF: Characteristics Resource flags. This field is
           reserved for future use. It is currently set to zero. */
        boost::uint32_t m_characteristics;

        /* MS_PE_COFF: Time/Date Stamp - The time that the resource data
           was created by the resource compiler. */
        boost::uint32_t m_time_date_stamp;


        /* MS_PE_COFF: Major Version - The major version number, set
           by the user. */
        boost::uint16_t m_major_version;

        /* MS_PE_COFF: Minor Version - The minor version number, set
           by the user. */
        boost::uint16_t m_minor_version;

        /* MS_PE_COFF: Number of Name Entries - The number of
           directory entries immediately following the table that use
           strings to identify Type, Name, or Language entries
           (depending on the level of the table).
        */
        boost::uint16_t m_num_of_name_entries;

        /* MS_PE_COFF: Number of ID Entries - The number of directory
           entries immediately following the Name entries that use
           numeric IDs for Type, Name, or Language entries.
        */
        boost::uint16_t m_num_of_id_entries;

        /* MS_PE_COFF: This field isn't really part of the
           IMAGE_RESOURCE_DIRECTORY structure. Rather, it's an array of
           IMAGE_RESOURCE_DIRECTORY_ENTRY structures that immediately
           follow the IMAGE_RESOURCE_DIRECTORY strucutre. The number of
           elements in the array is the sum of the NumberOfNamedEntries
           and the NumberOfIdEntries fields. The directory entry
           elements that have name identifiers (rather than integer IDs)
           come first in the array.
        */
        typedef std::vector<wpef_types::PE_Resource_Directory::ptr_t> Children_List_t;
        Children_List_t m_children;

        wpef_types::PE_Resource_Directory::Data_List_t m_data;

        std::string m_name;

        boost::uint32_t m_id;

        boost::uint8_t m_level;
	};

} /* namespace wpef_module */
} /* namespace libreverse */

#endif /* PE_RESOURCE_DIRECTORY_H_ */
