#ifndef WPEF_READER_H_
#define WPEF_READER_H_

#include <boost/shared_ptr.hpp>
#include <boost/cstdint.hpp>
#include "libreverse/io/input/File_Readers/File_Reader.h"
#include "libreverse/io/IO_Types.h"
#include "libreverse/Reverse.h"
#include "PE_Types.h"

namespace libreverse { namespace wpef_module {

    /*!
     * \class Reader
     * \date 2003
     * \author Stephen Torri
     */
    template <boost::uint32_t bitsize>
    class Reader : public io::File_Reader {
    public:

        /*!
         * \brief Default Constructor
         * \param target_file The file to be used for decompiling
         */
        Reader ( io_types::File_ID::ptr_t target_file );

        /*!
         * \brief Default Destructor
         */
        virtual ~Reader();

        /*!
         * \brief Return the bit size of the header (e.g. 32-bit)
         * \return Bit size of header
         */
        virtual boost::uint32_t get_size(void);

        /*! \brief Header reference for this reader
         */
        typename wpef_types::Header<bitsize>::ptr_t get_Header (void);

        typename wpef_types::PE_File<bitsize>::ptr_t get_File (void) const;

        bool support_File_Type ( void );

        /*
         * Return the meta information for a given key.
         *
         * \return String containing the information. If there was
         * an error or the name given is not found then the
         * resulting string will be blank.
         */
        virtual std::string get_Meta_Info ( File_Reader::Action index,
                                            std::string name = "" );

        virtual void read_Headers ( void );

        virtual data_types::Memory_Map::ptr_t get_Memory_Map ( void );

        /*!
         * \brief Print out the entire file contents
         */
        virtual std::string to_String (void);

        virtual io_types::Text_Data::data_type get_Text_Strings (void);

        virtual io_types::Text_Data::data_type get_UTF16_Strings (void);

    private:

        /*!
         * \brief Return the File Type of the target file
         */
        std::string get_File_Type (void);

        /* !\brief Return the Architecture Type of the target file */
        std::string get_Arch_Type (void);

        /* !\brief Return the offset for a section header */
        std::string get_Section_Offset ( std::string name );

        /* !\brief Return the offset for a section length */
        std::string get_Section_Length ( std::string name );

        std::string get_Entry_Point ( void );

        std::string get_Base_Address ( void );

        typename wpef_types::PE_Exception_Table_Entry<bitsize>::ptr_t
        create_Exception_Table_Entry ( boost::uint16_t type );

        /*---------------
         *   Variables
         *---------------*/
        /*! \brief WPEF File handle */
        typename wpef_types::PE_File<bitsize>::ptr_t m_file;

        /*! \brief Need to convert header data byte order */
        bool m_convert;

        typename wpef_types::Header<bitsize>::ptr_t m_data;

        data_types::Memory_Map::ptr_t m_loaded_image;

    public:

        /*---------------
         *   Functions
         *---------------*/

        /*!
         * \brief Get the WPEF DOS Header from the file
         */
        void read_DOS_Header (void);

        /*!
         * \brief Get the WPEF PE Header from the file
         */
        void read_PE_Header (void);

        /*!
         * \brief Get the WPEF PE Section Header from the file
         */
        void read_Section_Headers (void);

        virtual std::string get_Section_String ( std::string name ) const;

        void read_Optional_Header_Tables ( PE_File<bitsize>& output_file_ref );

        typename api::Results::Types read_Export_Table ( PE_File<bitsize>& output_file_ref );

        void read_Import_Table ( PE_File<bitsize>& output_file_ref );

        void read_Import_Lookup_Table ( wpef_types:: PE_Import_Directory::ptr_t& import_dir_ptr,
                                        PE_File<bitsize>& output_file_ref );

        /*!
         * \brief Get the WPEF PE Resource Tables from the image
         */
        void read_Resource_Table ( PE_File<bitsize>& output_file_ref );

        void
        handle_Resource_Directory_Entries ( PE_File<bitsize>& output_file_ref,
                                            wpef_types::PE_Resource_Directory::ptr_t& parent_ptr,
                                            wpef_types::PE_Resource_Directory_Entry::ptr_t& parent_entry_ptr,
                                            boost::uint32_t const& base_address );

        void read_Debug_Table ( PE_File<bitsize>& output_file_ref );

        void read_Load_Config_Table ( PE_File<bitsize>& output_file_ref );

        void read_Exception_Table ( PE_File<bitsize>& output_file_ref );

    };

} /* namespace wpef_module */
} /* namespace libreverse */

/* Include Source */
#include "Reader_T.cpp"

#endif /* WPEF_READER_H_ */
