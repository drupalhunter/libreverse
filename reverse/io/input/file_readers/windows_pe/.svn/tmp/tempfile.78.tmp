#include "PE_Resource_Data_Entry.h"
#include "Section_Flags.h"
#include <iostream>
#include <iomanip>
#include "libreverse/io/Byte_Converter.h"
#include "libreverse/io/String_Converter.h"
#include "libreverse/io/Output.h"
#include <sstream>
#include <boost/format.hpp>

using namespace libreverse::io;

namespace libreverse
{
    namespace wpef_module
    {

        PE_Resource_Data_Entry::PE_Resource_Data_Entry ( boost::uint8_t level )
                :  m_data_rva ( 0 ),
                m_size ( 0 ),
                m_codepage ( 0 ),
                m_reserved ( 0 ),
                m_level ( level ),
                m_data_string ( "" )
        {}

        std::string
        PE_Resource_Data_Entry::to_String ( void )
        {
            std::stringstream output_str;

            output_str << Output::indent ( m_level * 2 )
            << "PE Resource Data_Entry Section:" << std::endl
            << Output::indent ( m_level * 2 )
            << boost::format ( "  Data rva:             %1X" ) % m_data_rva << std::endl
            << Output::indent ( m_level * 2 )
            << boost::format ( "  Size:                 %1X" ) % m_size << std::endl
            << Output::indent ( m_level * 2 )
            << boost::format ( "  Codepage:             %1d" ) % m_codepage
            << std::endl << std::endl;

            output_str << "---------- BEGIN DATA ----------" << std::endl
            << m_data_string
            << "----------  END DATA  ----------" << std::endl;

            return output_str.str();

        }

        void
        PE_Resource_Data_Entry::convert ()
        {
            io::Byte_Converter::convert ( m_data_rva );
            io::Byte_Converter::convert ( m_size );
            io::Byte_Converter::convert ( m_codepage );
            io::Byte_Converter::convert ( m_reserved );
        }

        boost::uint32_t
        PE_Resource_Data_Entry::get_size ( void ) const
        {
            return static_cast<boost::uint32_t> ( 32 );
        }

        std::string
        PE_Resource_Data_Entry::data_To_String ( void ) const
        {
            std::vector<UChar> uchar_vector ( m_data_string.begin(),
                                              m_data_string.end() );

            return String_Converter::convert_From_UTF16_String ( uchar_vector );
        }
    } /* namespace wpef_module */
} /* namespace libreverse */

