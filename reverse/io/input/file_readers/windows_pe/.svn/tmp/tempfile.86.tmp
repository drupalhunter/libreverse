#include "PE_Header_T.h"
#include "libreverse/io/Byte_Converter.h"
#include <iomanip>
#include <sstream>
#include <boost/format.hpp>
#include <iostream>

namespace libreverse { namespace wpef_module {

    template <boost::uint32_t bitsize>
    boost::uint16_t const PE_Header<bitsize>::PE_MAGIC_SIGNATURE = 0x4550;

    template <boost::uint32_t bitsize>
    boost::uint16_t const PE_Header<bitsize>::LE_MAGIC_SIGNATURE = 0x454C;

    template <boost::uint32_t bitsize>
    boost::uint16_t const PE_Header<bitsize>::NE_MAGIC_SIGNATURE = 0x454E;

    template <boost::uint32_t bitsize>
    PE_Header<bitsize>::PE_Header()
    {}

    template <boost::uint32_t bitsize>
    void PE_Header<bitsize>::convert ()
    {
        m_coff_hdr_ptr->convert ();
        m_opt_hdr_ptr->convert ();
    }

    template <boost::uint32_t bitsize>
    bool PE_Header<bitsize>::needs_Convert ()
    {
        bool output = true;

        if ( ( p_magic == PE_MAGIC_SIGNATURE ) ||
             ( p_magic == LE_MAGIC_SIGNATURE ) ||
             ( p_magic == NE_MAGIC_SIGNATURE ) )
        {
            output = false;
        }

        return output;
    }

    template <boost::uint32_t bitsize>
    boost::uint32_t
    PE_Header<bitsize>::get_size () const
    {
        return static_cast<boost::uint32_t>(32);
    }

    template <boost::uint32_t bitsize>
    std::string
    PE_Header<bitsize>::to_String ()
    {
        std::stringstream output_str;

        output_str << "PE Header:" << std::endl;

        output_str << boost::format("  Magic: 0x%1%") %
            boost::io::group(std::setfill('0'), std::hex, std::setw(8), p_magic)
                   << std::endl;

        output_str << m_coff_hdr_ptr->to_String() << std::endl;

        output_str << m_opt_hdr_ptr->to_String() << std::endl;

        return output_str.str();

    }

    template <boost::uint32_t bitsize>
    bool PE_Header<bitsize>::is_PE_File () const
    {
        return (p_magic == PE_MAGIC_SIGNATURE);
    }

    template <boost::uint32_t bitsize>
    std::string
    PE_Header<bitsize>::get_File_Type (void) const
    {
        /* I don't know if DOS EXE files were statically linked or
           not. For now we simply return that all EXE files are Executable
           files. */

        return "windows:pe_executable";
    }

    template <boost::uint32_t bitsize>
    std::string
    PE_Header<bitsize>::get_Arch_Type (void) const
    {
        /* TODO: We need to determine CPU architecture if possible. For
           now we simply say i386 */
        return "intel:i386";
    }

    template <boost::uint32_t bitsize>
    wpef_types::COFF_Header::ptr_t
    PE_Header<bitsize>::get_COFF_Header (void) const
    {
        return m_coff_hdr_ptr;
    }

    template <boost::uint32_t bitsize>
    void
    PE_Header<bitsize>::set_COFF_Header ( wpef_types::COFF_Header::ptr_t c_ptr )
    {
        m_coff_hdr_ptr = c_ptr;
    }

    template <boost::uint32_t bitsize>
    typename wpef_types::PE_Optional_Header<bitsize>::ptr_t
    PE_Header<bitsize>::get_Optional_Header (void) const
    {
        return m_opt_hdr_ptr;
    }

    template <boost::uint32_t bitsize>
    void
    PE_Header<bitsize>::set_Optional_Header ( typename wpef_types::PE_Optional_Header<bitsize>::ptr_t o_ptr )
    {
        m_opt_hdr_ptr = o_ptr;
    }

    template <boost::uint32_t bitsize>
    bool
    PE_Header<bitsize>::is_Valid () const
    {
        return this->is_PE_File() &
            m_coff_hdr_ptr->is_Valid();
    }

    template <boost::uint32_t bitsize>
    boost::uint32_t
    PE_Header<bitsize>::get_Magic_Number (void) const
    {
        return p_magic;
    }

} /* namespace wpef_module */
} /* namespace libreverse */
