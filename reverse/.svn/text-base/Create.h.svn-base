/*  Create.h

   Copyright (C) 2008 Stephen Torri

   This file is part of Libreverse.

   Libreverse is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published
   by the Free Software Foundation; either version 3, or (at your
   option) any later version.

   Libreverse is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see
   <http://www.gnu.org/licenses/>.
*/

#ifndef CREATE_H_
#define CREATE_H_

#include <boost/cstdint.hpp>
#include <boost/format.hpp>

#include "libreverse/Trace.h"
#include "libreverse/io/Preconditions.h"
#include "libreverse/errors/Internal_Exception.h"

using namespace libreverse::trace;
using namespace libreverse::api;

namespace libreverse
{
  namespace alloc
  {

    /*!
     * \class Create
     * \date 2008
     * \author Stephen Torri
     */
    class Create
    {
    public:

      /*!
       * \brief Create shared pointer
       *
       * \post return shared pointer is not null
       *
       * \exception Internal_Exception(BAD_ALLOC)
       */
      template <typename Pointer_Type>
      static inline boost::shared_ptr<Pointer_Type> shared_pointer ()
	{
	  // Create java classifier algorithm
	  try
	    {
	      boost::shared_ptr<Pointer_Type> tmp ( new Pointer_Type() );
	      io::Preconditions::is_set ( tmp );
	      return tmp;
	    }
	  catch ( std::bad_alloc& ba )
	    {
	      Trace::write_Trace ( TraceArea::COMPONENTS,
				   TraceLevel::ERROR,
				   boost::str ( boost::format("Exception throw in %s at line %d")
						% __FILE__
						% __LINE__ ) );
	      
	      Trace::write_Trace ( TraceArea::COMPONENTS,
				   TraceLevel::ERROR,
				   ba.what() );

	      throw errors::Internal_Exception ( errors::Internal_Exception::BAD_ALLOC );
	    }
	}

      template <typename Pointer_Type, typename Param_Type>
      static inline boost::shared_ptr<Pointer_Type> shared_pointer ( Param_Type param1 )
	{
	  // Create java classifier algorithm
	  try
	    {
	      boost::shared_ptr<Pointer_Type> tmp ( new Pointer_Type ( param1 ) );
	      io::Preconditions::is_set ( tmp );
	      return tmp;
	    }
	  catch ( std::bad_alloc& ba )
	    {
	      Trace::write_Trace ( TraceArea::COMPONENTS,
				   TraceLevel::ERROR,
				   boost::str ( boost::format("Exception throw in %s at line %d")
						% __FILE__
						% __LINE__ ) );
	      
	      Trace::write_Trace ( TraceArea::COMPONENTS,
				   TraceLevel::ERROR,
				   ba.what() );

	      throw errors::Internal_Exception ( errors::Internal_Exception::BAD_ALLOC );
	    }
	}

    };

  } /* namespace io */
} /* namespace libreverse */

#endif /* CREATE_H_ */
