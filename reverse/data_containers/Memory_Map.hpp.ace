#ifndef MEMORY_MAP_H_
#define MEMORY_MAP_H_

#include <boost/cstdint.hpp>
#include <boost/scoped_ptr.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/format.hpp>
#include <iostream>
#include <iomanip>

#include <ace/Vector_T.h>
#include <ace/Malloc_T.h>
#include <ace/MMAP_Memory_Pool.h>
#include <ace/Null_Mutex.h>
#include <ace/PI_Malloc.h>

#include <fstream>
#include "io/exceptions/IO_Exception.hpp"
#include "infrastructure/data_source/Data_Visitor_Item.hpp"

namespace libreverse { namespace data_types {

    class Memory_Map : public infrastructure::Data_Visitor_Item
    {
    public:

        typedef ACE_Vector <boost::uint8_t> Map_Values_t;

        typedef boost::uint8_t data_type;
        typedef boost::uint8_t* data_type_ptr;
        typedef boost::uint8_t const* const_data_type_ptr;
        typedef Map_Values_t::iterator iterator;

        typedef boost::shared_ptr<Memory_Map> ptr;

        Memory_Map ( const size_t size,
                     boost::int32_t const prot = 0,
                     boost::int32_t const flags = 0 );

        Memory_Map ( const size_t& size,
                     boost::uint32_t const offset,
                     boost::int32_t const prot = 0,
                     boost::int32_t const flags = 0 );

        Memory_Map ( std::ifstream& input_ref,
                     boost::uint32_t const offset,
                     boost::int32_t const prot = 0,
                     boost::int32_t const flags = 0 );

        //Memory_Map ( Memory_Map const& rhs );

        virtual ~Memory_Map();

        template <typename Offset_Type>
        void seek ( Offset_Type offset )
        {
            if ( offset > m_map_data->capacity() )
                {
                    /*
                      std::cerr << std::endl
                      << "The offset given, " << offset
                      << " is invalid. Its pointing to a"
                      << std::endl
                      << "memory location outside of space "
                      << "allocated to this"
                      << std::endl
                      << "Memory Map. ("
                      << m_data.size() << ")"
                      << std::endl << std::flush;
                    */
                    throw errors::IO_Exception
                        ( errors::IO_Exception::OUT_OF_RANGE );
                }

            m_present_pos = offset;

            /*
              std::cout
              << boost::format ("Memory_Map::seek - new present pos = %1%") %
              m_present_pos
              << std::endl;
            */
        }

        void read ( data_type_ptr dest_addr_ptr,
                    boost::uint32_t const& len);

        void copy ( iterator src_addr_ptr,
                    boost::uint32_t const& len );

        iterator begin() const;

        iterator end() const;

        iterator get_Present_Position (void);

        iterator get_Present_Position (void) const;

        boost::uint32_t const& get_Present_Position_Value (void) const;

        boost::uint32_t const size (void) const;

        std::string to_String (void) const;

        bool operator== ( Memory_Map& rhs_ref ) const;

        virtual void
        accept ( infrastructure::Data_Visitor* vstr_ptr );

    private:

        typedef ACE_Malloc_T<ACE_MMAP_Memory_Pool,
                             ACE_Null_Mutex,
                             ACE_PI_Control_Block> Allocator_t;

        typedef ACE_Allocator_Adapter<Allocator_t> Allocator_Adapter_t;

        Map_Values_t* m_map_data;

        ACE_MMAP_Memory_Pool_Options const* m_options_ptr;

        ACE_Allocator* m_alloc_ptr;

        ACE_Null_Mutex m_lock;

        boost::uint32_t m_present_pos;
    };

} /* namespace data_types */
} /* namespace libreverse */

#endif /* MEMORY_MAP_H_ */
