#include "Memory_Map.hpp"
#include <sstream>
#include <iterator>

#include "infrastructure/data_source/Data_Visitor.hpp"

namespace libreverse { namespace data_types {

    Memory_Map::Memory_Map ( const size_t size,
                             boost::int32_t const prot,
                             boost::int32_t const flags )
        : m_options_ptr ( new ACE_MMAP_Memory_Pool_Options
                          ( 0,
                            ACE_MMAP_Memory_Pool_Options::ALWAYS_FIXED,
                            1,
                            0,
                            flags ) ),
        m_present_pos ( 0 )
    {

        m_alloc_ptr = new Allocator_Adapter_t ( static_cast<const char*>(0),
                                                static_cast<const char*>(0),
                                                m_options_ptr );

        m_alloc_ptr->protect ( -1, prot );

        m_map_data = new Map_Values_t( size, m_alloc_ptr );
    }


    Memory_Map::Memory_Map ( const size_t& size,
                             boost::uint32_t const offset,
                             boost::int32_t const prot,
                             boost::int32_t const flags )
        : m_present_pos ( 0 )
    {
        m_options_ptr = new ACE_MMAP_Memory_Pool_Options
            ( reinterpret_cast<char*>(offset),
              ACE_MMAP_Memory_Pool_Options::ALWAYS_FIXED,
              1,
              0,
              flags );

        m_alloc_ptr = new ACE_Allocator_Adapter<Allocator_t>
            ( static_cast<const char*>(0),
              static_cast<const char*>(0),
              m_options_ptr );

        m_alloc_ptr->protect ( -1, prot );

        m_map_data = new Map_Values_t( size, m_alloc_ptr );
    }

    Memory_Map::Memory_Map ( std::ifstream& input_ref,
                             boost::uint32_t const offset,
                             boost::int32_t const prot,
                             boost::int32_t const flags )
        : m_present_pos ( 0 )
    {
        m_options_ptr = new ACE_MMAP_Memory_Pool_Options
            ( reinterpret_cast<char*>(offset),
              ACE_MMAP_Memory_Pool_Options::ALWAYS_FIXED,
              1,
              0,
              flags );

        m_alloc_ptr = new ACE_Allocator_Adapter<Allocator_t>
            ( static_cast<const char*>(0),
              static_cast<const char*>(0),
              m_options_ptr );

        m_alloc_ptr->protect ( -1, prot );

        input_ref.seekg( 0, std::ios::end );
        boost::uint32_t length = input_ref.tellg();
        input_ref.seekg( 0, std::ios::beg );

        char buffer [ length ];
        input_ref.read ( buffer, length );

        m_map_data = new Map_Values_t( length, m_alloc_ptr );

        //this->copy ( reinterpret_cast<boost::uint8_t*>(buffer), length );

        std::copy ( buffer,
                    buffer + length,
                    std::back_inserter ( *m_map_data ) );
    }

    /*
    Memory_Map::Memory_Map ( Memory_Map const& rhs )
        : m_map_data ( rhs.m_map_data->size(),
                       0,
                       0,
                       rhs.m_map_data->get_allocator()),
          m_present_pos ( rhs.m_present_pos )
    {
        std::copy ( rhs.m_map_data->begin(),
                    rhs.m_map_data->end(),
                    m_map_data->begin() );
    }
    */

    Memory_Map::~Memory_Map ()
    {}

    void
    Memory_Map::read ( data_type_ptr dest_addr_ptr,
                       boost::uint32_t const& length )
    {
        if ( m_present_pos + length > m_map_data->capacity() )
            {
                /*
                  std::cerr << "The present position pointer is invalid. "
                  << "Its pointing"
                  << std::endl
                  << "to a memory location out side of space "
                  << "allocated to"
                  << std::endl
                  << "this Memory Map."
                  << std::endl;
                */
                throw errors::IO_Exception
                    ( errors::IO_Exception::INVALID_INDEX );
            }

        if ( dest_addr_ptr == 0 )
            {
                throw errors::IO_Exception
                    ( errors::IO_Exception::FATAL_IO_ERROR );
            }

        memcpy ( dest_addr_ptr, &( (*m_map_data)[m_present_pos]), length );

        m_present_pos += length;
    }

    Memory_Map::iterator
    Memory_Map::begin() const
    {
        return m_map_data->begin();
    }

    Memory_Map::iterator
    Memory_Map::end() const
    {
        return m_map_data->end();
    }

    Memory_Map::iterator
    Memory_Map::get_Present_Position (void)
    {
        return m_map_data->begin() + m_present_pos;
    }

    Memory_Map::iterator
    Memory_Map::get_Present_Position (void) const
    {
        return m_map_data->begin() + m_present_pos;
    }

    boost::uint32_t const
    Memory_Map::size (void) const
    {
        return m_map_data->size();
    }

    void
    Memory_Map::copy ( iterator src_addr_ptr,
                       boost::uint32_t const& length )
    {
        // If m_present_pos + length > m_end_addr ERROR
        if ( m_present_pos + length > m_map_data->capacity() )
            {
                /*
                  std::cerr << "The present position pointer will be"
                  << " invalid if we write from the present"
                  << std::endl
                  << "position with the given length. It will"
                  << " cause an segfault. Recheck the value"
                  << std::endl
                  << "given for length (" << length << ") or check"
                  << " the setting of the present position."
                  << std::endl;
                */
                throw errors::IO_Exception
                    ( errors::IO_Exception::OUT_OF_RANGE );
            }

        std::copy ( src_addr_ptr,
                    src_addr_ptr + length,
                    std::back_inserter(*m_map_data) );

        m_present_pos += length;

    }

    boost::uint32_t const&
    Memory_Map::get_Present_Position_Value (void) const
    {
        return m_present_pos;
    }

    std::string
    Memory_Map::to_String (void) const
    {
        std::stringstream output;

        output << "Memory_Map:" << std::endl
               << "----------------------------------------" << std::endl;

        boost::uint8_t byte_counter = 0;
        //boost::uint32_t index = 0;

        for ( Memory_Map::Map_Values_t::size_type index = 0;
              index < m_map_data->size();
              index++ )
            {
                boost::uint8_t value = 0;
                m_map_data->get ( value, index );

                if ( byte_counter == 0 )
                    {
                        boost::uint32_t* address =
                            reinterpret_cast<boost::uint32_t*>
                            (value);
                        output << boost::format("%1p (%2X): ") %
                            address %
                            index;
                    }

                output << boost::format("%1%") %
                    boost::io::group ( std::hex,
                                       std::setw(2),
                                       std::setfill('0'),
                                       static_cast<boost::uint16_t>(value));

                if ( ( byte_counter == 3 ) ||
                     ( byte_counter == 7 ) ||
                     ( byte_counter == 11 ) )
                {
                    output << "  ";
                    byte_counter++;
                }
                else if ( byte_counter != 15 )
                    {
                        output << " ";
                        byte_counter++;
                    }
                else
                    {
                        byte_counter = 0;
                        output << std::endl;
                    }
            }
        //index++;

        return output.str();
    }

    bool
    Memory_Map::operator== ( Memory_Map& rhs_ref ) const
    {
        return ( (*m_map_data) == *(rhs_ref.m_map_data) );
    }

    void
    Memory_Map::accept ( infrastructure::Data_Visitor* vstr_ptr )
    {
        vstr_ptr->visit (this);
    }

} /* Namespace data_types */
} /* namespace libreverse */
