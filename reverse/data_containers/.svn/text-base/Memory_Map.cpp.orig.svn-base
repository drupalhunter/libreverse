#include "Memory_Map.hpp"
#include "infrastructure/data_source/Data_Visitor.hpp"

namespace libreverse { namespace data_types {

    Memory_Map::Memory_Map ( boost::uint32_t const& size )
        : m_size ( size )
    {
        m_base_addr = new char[size];
        m_present_pos = m_base_addr;

        /*
        std::cout
            << boost::format ("Memory_Map::constructor - start present pos = %1%") %
            boost::io::group ( std::hex,
                               m_present_pos )
            << std::endl;
        */

        m_end_addr = m_base_addr + size;
    }

    Memory_Map::Memory_Map ( boost::uint64_t const& size )
        : m_size ( size )
    {
        m_base_addr = new char[size];
        m_present_pos = m_base_addr;

        m_end_addr = m_base_addr + size;
    }

    Memory_Map::Memory_Map ( Memory_Map const& rhs )
        : m_base_addr (rhs.m_base_addr),
          m_size (rhs.m_size),
          m_present_pos ( rhs.m_present_pos ),
          m_end_addr ( rhs.m_end_addr )
    {

        /*
        std::cout
            << "Memory_Map::copy_constructor - start present pos = "
            << m_present_pos
            << std::endl;
        */
#warning We do not deep copy the data here
    }

    Memory_Map::~Memory_Map ()
    {
        delete[] m_base_addr;
    }

    void
    Memory_Map::read ( iterator dest_addr_ptr,
                       boost::uint32_t const& length )
    {
        if ( m_present_pos > m_end_addr )
            {
                std::cerr << "The present position pointer is invalid. "
                          << "Its pointing"
                          << std::endl
                          << "to a memory location out side of space "
                          << "allocated to"
                          << std::endl
                          << "this Memory Map."
                          << std::endl;
                throw errors::IO_Exception
                    ( errors::IO_Exception::INVALID_INDEX );
            }

        memcpy ( dest_addr_ptr, m_present_pos, length );

        m_present_pos += length;
    }

    Memory_Map::iterator
    Memory_Map::begin()
    {
        return m_base_addr;
    }

    Memory_Map::const_iterator
    Memory_Map::begin() const
    {
        return m_base_addr;
    }

    Memory_Map::const_iterator
    Memory_Map::end() const
    {
        return m_end_addr;
    }

    Memory_Map::iterator
    Memory_Map::get_Present_Position (void)
    {
        return m_present_pos;
    }

    Memory_Map::const_iterator
    Memory_Map::get_Present_Position (void) const
    {
        return m_present_pos;
    }

    boost::uint32_t const&
    Memory_Map::size (void) const
    {
        return m_size;
    }

    void
    Memory_Map::accept ( infrastructure::Data_Visitor* vstr_ptr )
    {
        vstr_ptr->visit (this);
    }

    void
    Memory_Map::copy ( const_iterator src_addr_ptr, boost::uint32_t const& length )
    {
        // If m_present_pos + length > m_end_addr ERROR
        if ( m_present_pos + length > m_end_addr )
            {
                std::cerr << "The present position pointer will be"
                          << " invalid if we write from the present"
                          << std::endl
                          << "position with the given length. It will"
                          << " cause an segfault. Recheck the value"
                          << std::endl
                          << "given for length (" << length << ") or check"
                          << " the setting of the present position."
                          << std::endl;
                throw errors::IO_Exception
                    ( errors::IO_Exception::OUT_OF_RANGE );
            }

        memcpy ( m_present_pos, src_addr_ptr, length );

        m_present_pos += length;

    }
} /* Namespace data_types */
} /* namespace libreverse */

