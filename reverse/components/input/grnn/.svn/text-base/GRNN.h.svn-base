/*  GRNN.h

   Copyright (C) 2008 Stephen Torri

   This file is part of Libreverse.

   Libreverse is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published
   by the Free Software Foundation; either version 3, or (at your
   option) any later version.

   Libreverse is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see
   <http://www.gnu.org/licenses/>.
*/

#ifndef GRNN_H
#define GRNN_H

#include "Training_Set.h"

namespace libreverse
{

  namespace classifier
  {
    template <typename Data_Type>
    class GRNN
    {
    public:

    
      GRNN ( double sigma,
	     typename classifier_types::Training_Set<Data_Type>::Data_List_t const& training,
	     typename classifier_types::Configuration<Data_Type>::ptr_t config );

      /*! \brief Classify the training set
       * \return classification value representing the optimal sigma
       */
      double execute ( typename classifier_types::Training_Set<Data_Type>::Data_List_t const& validation_list );

      /*! \brief Classify the training set
       * \return classification value representing the GRNN's answer
       */
      double classify ( typename classifier_types::Training_Set<Data_Type>::Data_List_t::const_iterator& target_row );

      double get_Mean_Distance_Squared ( void ) const;

    private:

      /*!
       * \brief Compute the approximation function value from the target row
       * \param target_row Row of target data
       * \return approximation function value
       * \pre Target row is not empty
       */
      double approximation_function ( typename classifier_types::Training_Set<Data_Type>::Data_List_t::const_iterator target_row );

      /*!
       * \brief Compute the hidden function value from the two input rows
       * \param target_row Row of target data
       * \param training_row Row of training data
       * \return hidden function value
       * \pre Stored sigma is not zero
       * \pre Target row is not empty
       * \pre Training row is not empty
       */
      double hiddenFunction ( typename classifier_types::Training_Set<Data_Type>::Data_List_t::const_iterator target_row ,
			      typename classifier_types::Training_Set<Data_Type>::Data_List_t::const_iterator training_row );

      /*!
       * \brief Compute the sum distance squared value from the two input rows
       * \param target_row Row of target data
       * \param training_row Row of training data
       * \return sum distance squared value
       * \pre Target row is not empty
       * \pre Training row is not empty
       */
      double distance_squared ( typename classifier_types::Training_Set<Data_Type>::Data_List_t::const_iterator target_row ,
				typename classifier_types::Training_Set<Data_Type>::Data_List_t::const_iterator training_row );

      double m_sigma;

      double m_mean_distance_squared;

      typename classifier_types::Training_Set<Data_Type>::Data_List_t const& m_training;

      typename classifier_types::Configuration<Data_Type>::ptr_t m_config;

    };
  
  } /* namespace classifier */
} /* namespace libreverse */

#include "GRNN.cpp"

#endif /* TRAINING_DATA_H */
