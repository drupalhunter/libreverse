/*  Optimizer.h

    Copyright (C) 2008 Stephen Torri

    This file is part of Libreverse.

    Libreverse is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published
    by the Free Software Foundation; either version 3, or (at your
    option) any later version.

    Libreverse is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see
    <http://www.gnu.org/licenses/>.
*/

#ifndef OPTIMIZER_H
#define OPTIMIZER_H

#include "Classifier_Types.h"
#include "Training_Set.h"
#include <vector>

namespace libreverse {
  namespace classifier {

    template <template <typename Data_Type> class Classifier_Type, typename Data_Type>
    class Optimizer
    {
    public:

      Optimizer();

      /*
	\brief Initialize Optimizer
	\pre Training Data objects are initialized
	\post The optimizer is prepared to do work.
      */
      void init ( typename classifier_types::Training_Set<Data_Type>::ptr_t data,
		  double mutation_amount = 0.125,
		  boost::uint32_t iteration_limit = 1000 );
     
      /* \brief Process the Training Data in order to obtain the best sigma
         \pre The Training Data objects have been received (m_input_data is not empty)
         \post The best sigma has been found the optimizer. Tranining Data is unchanged.
      */
      void process (void);
      
      typename classifier_types::Candidate_Solution<Classifier_Type, Data_Type>::ptr_t test (void);

    private:

      void mutate_Attributes ();
      
      void mutate_Sigma ();

      // Create N number of random Candidate Solutions
      void populate_Gene_Pool ( boost::uint32_t number = 10 );

      // Randomly select two parents from the gene pool. Return the parent with the best fitness
      typename classifier_types::Candidate_Solution<Classifier_Type, Data_Type>::ptr_t get_Parent ();

      // Produce a child from the two parents
      typename classifier_types::Candidate_Solution<Classifier_Type, Data_Type>::ptr_t
      breed ( typename classifier_types::Candidate_Solution<Classifier_Type, Data_Type>::ptr_t parent_one,
	      typename classifier_types::Candidate_Solution<Classifier_Type, Data_Type>::ptr_t parent_two );

      // Replace the worst solution with the child
      void replace_Worst ();

      //------------------------------------
      //             VARIABLES
      //------------------------------------
      typedef std::vector < typename classifier_types::Candidate_Solution<Classifier_Type, Data_Type>::ptr_t > Pool_Type_t;
      Pool_Type_t m_gene_pool;

      typename classifier_types::Candidate_Solution<Classifier_Type, Data_Type>::ptr_t m_child;
      
      typename classifier_types::Training_Set<Data_Type>::ptr_t m_data;
      
      double m_mutation_amount;
      
      boost::uint32_t m_iteration_limit;

      boost::uint32_t m_best_candidate_index;
    };

  } /* namespace classifier */
} /* namespace libreverse */

#include "Optimizer.cpp"

#endif /* OPTIMIZER_H */
