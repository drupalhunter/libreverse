#include "Tevis_Unknown_Region_Checker_ELF_Algorithm.h"
#include "libreverse/data_containers/Memory_Map.h"
#include "libreverse/meta/Meta_Object.h"
#include "libreverse/io/input/File_Readers/Reader_Factory.h"
#include "libreverse/io/input/File_Readers/Elf/Elf_Reader_T.h"

namespace libreverse { namespace component {

    std::string
    Tevis_Unknown_Region_Checker_ELF_Algorithm::run ( std::string filename )
    {
        Trace::write_Trace
            ( TraceArea::COMPONENTS,
              TraceLevel::DETAIL,
             "Entering Tevis_Unknown_Region_Checker_ELF_Algorithm::run" );

        elf_types::Elf_Reader<32>::ptr_t file_reader_ptr = boost::dynamic_pointer_cast< elf_module::Elf_Reader<32> >
            ( ( io::Reader_Factory::Instance() ).create_File_Reader ( filename ) );

        file_reader_ptr->read_Section_Headers();

        elf_types::Elf_Header<32>::ptr_t hdr_ptr = file_reader_ptr->get_Header();

        // Grab reference to the Memory_Map associated with the file
        data_types::Memory_Map::ptr_t mem_ptr = file_reader_ptr->get_Memory_Map ();

        std::string meta_output = "";

        // Get size of image
        boost::uint32_t unaccounted_size = mem_ptr->size();

        for ( elf_types::Elf_Header<32>::Section_Header_Map_t::const_iterator cpos = hdr_ptr->get_Section_Header_Begin();
              cpos != hdr_ptr->get_Section_Header_End();
              ++cpos )
            {
                // Get the Section header
                elf_types::Elf_Section_Header<32>::ptr_t sec_ptr = (*cpos).second;
                
                // Get the size of the section in memory
                boost::uint32_t virt_size = sec_ptr->get_Section_Size();

                // Subtract out the size of the section
                unaccounted_size -= virt_size;
            }

        //   set meta string to uncharted_regions:TRUE
        if ( unaccounted_size != 0 )
            {
                meta_output = "uncharted_regions:TRUE";
            }
        else
            {
                meta_output = "uncharted_regions:FALSE";
            }

        Trace::write_Trace
            ( TraceArea::COMPONENTS,
              TraceLevel::DETAIL,
             "Exiting Tevis_Unknown_Region_Checker_ELF_Algorithm::run" );

        return meta_output;
    }

} /* namespace component */
} /* namespace libreverse */

