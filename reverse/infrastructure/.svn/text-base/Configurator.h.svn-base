/*  Configurator.h

   Copyright (C) 2008 Stephen Torri

   This file is part of Libreverse.

   Libreverse is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published
   by the Free Software Foundation; either version 3, or (at your
   option) any later version.

   Libreverse is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see
   <http://www.gnu.org/licenses/>.
*/


#ifndef INF_CONSTRUCT_H_
#define INF_CONSTRUCT_H_

#include "Component_Graph.h"
#include "Component_Types.h"
#include "libreverse/components/input/grnn/Classifier_Types.h"
#include "config.h"

namespace libreverse { namespace infrastructure {

    class Configurator {
    public:

      static Configurator& Instance ( std::string file = CONFIG_DIRECTORY 
				      "/config.xml" )
      {
	static Configurator fact_ref ( file );
	return fact_ref;
      }

      /**
       * All Data Source factories will call this when they
       * are first initialized. The information given to them
       * tell them how to transfer data along with any transfer
       * specific information.
       *
       * @param fact_ptr Pointer to the Data_Source_Factory call the
       * Configurator
       */
      void register_Factory ( infrastructure_types::Data_Source_Factory_Base::ptr_t fact_ptr);

      infrastructure_types::Component_Graph::Map_ptr_t
	get_Graph ( boost::uint32_t input_id,
		    boost::uint32_t output_id );

      classifier_types::GRNN_Data_Map::ptr_t get_GRNN_Data ( void );

    private:

      Configurator ( std::string file );

      Configurator ( const Configurator& ){}
      
      Configurator& operator= ( const Configurator& ){}
      
      ~Configurator (){}


      // System wide configuration
      static infrastructure_types::Configuration_Data::ptr_t m_config;

      infrastructure_types::Configurator::Formula_Map_ptr_t m_formulas;

      // GRNN information
      classifier_types::GRNN_Data_Map::ptr_t m_grnn_data_map;
    };


} /* namespace infrastructure */
} /* namespace libreverse */

#endif /* INF_CONSTRUCT_H_ */
