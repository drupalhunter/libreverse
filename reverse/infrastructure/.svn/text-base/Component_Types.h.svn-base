/*  Component_Types.h

   Copyright (C) 2008 Stephen Torri

   This file is part of Libreverse.

   Libreverse is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published
   by the Free Software Foundation; either version 3, or (at your
   option) any later version.

   Libreverse is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see
   <http://www.gnu.org/licenses/>.
*/

#ifndef COMPONENT_TYPES_H_
#define COMPONENT_TYPES_H_

#include <boost/shared_ptr.hpp>
#include <boost/graph/adjacency_list.hpp>
#include <list>
#include <map>
#include <string>

namespace libreverse {

    namespace infrastructure {

        class Component_Actor;
        class Component_State;
        class Component;
        class Component_Data;
        class Component_Graph;
        class Component_State;
        class Component_State_Algorithm;
        class Configuration_Data;
        class Configurator;
        class Data_Object;
        class Data_Source_Base;
        class Data_Source_Config_Base;
        class Data_Source_Factory;
        class Data_Source_Factory_Base;
        template <typename Transfer_Type> class Data_Source;
        class Database_Data_Source_Config;
        class Database_Data_Transfer;
        class File_Data_Source_Config;
        class File_Data_Transfer;
        class Formula_List;
        class Memory_Data_Source_Config;
        class Memory_Data_Transfer;
    }

    namespace infrastructure_types {

        class Component
        {
        public:
            typedef std::list < std::string > Meta_List_t;
            typedef std::list < std::string > Data_List_t;
            typedef boost::shared_ptr<infrastructure::Component> ptr_t;
            typedef boost::shared_ptr<infrastructure::Component const> const_ptr_t;
        };

        class Component_State
        {
        public:
            typedef boost::shared_ptr < infrastructure::Component_State > ptr_t;
        };

        class Component_Data
        {
        public:

            typedef boost::shared_ptr < infrastructure::Component_Data > ptr_t;
            typedef boost::shared_ptr < infrastructure::Component_Data const > const_ptr_t;

            typedef std::map <boost::uint32_t const, bool> Input_Token_t;
        };

        class Component_State_Algorithm
        {
        public:
            typedef boost::shared_ptr < infrastructure::Component_State_Algorithm > ptr_t;
        };


        class Data_Source_Base {
        public:

            typedef boost::shared_ptr < infrastructure::Data_Source_Base > ptr_t;

            typedef boost::shared_ptr < infrastructure::Data_Source_Base const > const_ptr_t;
        };

        template <typename Transfer_Type>
        class Data_Source {
        public:

            typedef boost::shared_ptr < infrastructure::Data_Source<Transfer_Type> > ptr_t;

            typedef boost::shared_ptr < infrastructure::Data_Source<Transfer_Type> const > const_ptr_t;
        };

        class Data_Source_Factory {
        public:

            typedef boost::shared_ptr < infrastructure::Data_Source_Factory > ptr_t;

            typedef boost::shared_ptr < infrastructure::Data_Source_Factory const > const_ptr_t;
        };

        class Component_Graph {
        public:

            typedef boost::shared_ptr < infrastructure::Component_Graph > ptr_t;
            typedef boost::shared_ptr < infrastructure::Component_Graph const> const_ptr_t;
	
            typedef boost::property< boost::vertex_name_t,
                                     Component::ptr_t > VertexProperty_t;

            typedef boost::adjacency_list<boost::vecS, // OutEdgeList
                                          boost::vecS, // VertexList
                                          boost::directedS, // Directed
                                          VertexProperty_t> // VertexProperties
            Graph_t;

            typedef std::pair<Data_Source_Base::const_ptr_t,
                              Graph_t::degree_size_type>
            Result_Data_t;

            typedef std::map<boost::uint32_t, Result_Data_t> Data_Map_t;

            // Map type for storing Graphs from the individual formula files
            // Layout:
            //    "input", Component_Graph (input)
            //    "analysis", Component_Graph (analysis)
            //    "output", Component_Graph (output)
            typedef std::map<std::string, Component_Graph::ptr_t > Map_t;
            typedef boost::shared_ptr<Map_t> Map_ptr_t;

            typedef boost::graph_traits<Graph_t>::vertex_descriptor
            Vertex_t;

            typedef boost::graph_traits<Graph_t>::edge_descriptor
            Edge_t;
        
            typedef boost::property_map<Graph_t, boost::vertex_name_t>::type
            Component_Map_t;

            typedef boost::graph_traits<Graph_t>::in_edge_iterator
            In_Edge_Iterator_t;

            typedef boost::graph_traits<Graph_t>::out_edge_iterator
            Out_Edge_Iterator_t;

            typedef std::map<boost::uint32_t, Vertex_t> IdVertexMap_t;

            typedef std::pair<In_Edge_Iterator_t,
                              In_Edge_Iterator_t> Input_Edge_List_t;

            typedef std::vector < Component::ptr_t > Component_List_t;

            typedef boost::graph_traits<Graph_t>::degree_size_type
            Degree_Size_t;

        };

        class Configurator {
        public:

            typedef std::map < std::pair<boost::uint32_t, boost::uint32_t>, infrastructure::Formula_List >
            Formula_Map_t;

            typedef boost::shared_ptr<Formula_Map_t> Formula_Map_ptr_t;

            typedef boost::shared_ptr<infrastructure::Configurator> ptr_t;
        };

        class Configuration_Data {
        public:

            typedef boost::shared_ptr<infrastructure::Configuration_Data> ptr_t;
        };

        class Data_Source_Factory_Base {
        public:
            typedef boost::shared_ptr < infrastructure::Data_Source_Factory_Base > ptr_t;
        };

        class Data_Object
        {
        public:
            typedef boost::shared_ptr < infrastructure::Data_Object > ptr_t;
            typedef boost::shared_ptr < infrastructure::Data_Object const > const_ptr_t;
        };

        class Database_Data_Transfer {
        public:
            typedef boost::shared_ptr < infrastructure::Database_Data_Transfer > ptr_t;
            typedef boost::shared_ptr < infrastructure::Database_Data_Transfer const > const_ptr_t;
        };

        class Database_Data_Source_Config {
        public:
            typedef boost::shared_ptr < infrastructure::Database_Data_Source_Config > ptr_t;
            typedef boost::shared_ptr < infrastructure::Database_Data_Source_Config const > const_ptr_t;
        };

        class Data_Source_Config_Base {
        public:
            typedef boost::shared_ptr < infrastructure::Data_Source_Config_Base > ptr_t;
            typedef boost::shared_ptr < infrastructure::Data_Source_Config_Base const > const_ptr_t;
        };

        class File_Data_Transfer {
        public:
            typedef boost::shared_ptr < infrastructure::File_Data_Transfer > ptr_t;
            typedef boost::shared_ptr < infrastructure::File_Data_Transfer const > const_ptr_t;
        };

        class File_Data_Source_Config {
        public:
            typedef boost::shared_ptr < infrastructure::File_Data_Source_Config > ptr_t;
            typedef boost::shared_ptr < infrastructure::File_Data_Source_Config const > const_ptr_t;
        };

        class Memory_Data_Transfer {
        public:
            typedef boost::shared_ptr < infrastructure::Memory_Data_Transfer > ptr_t;
            typedef boost::shared_ptr < infrastructure::Memory_Data_Transfer const > const_ptr_t;
        };

        class Memory_Data_Source_Config {
        public:

            typedef boost::shared_ptr < infrastructure::Memory_Data_Source_Config > ptr_t;
            typedef boost::shared_ptr < infrastructure::Memory_Data_Source_Config const > const_ptr_t;
        };

        class Component_Actor
        {
        public:
            typedef boost::shared_ptr < infrastructure::Component_Actor > ptr_t;
        };

    } /* namespace infrastructure */
} /* namespace libreverse */

#endif /* COMPONENT_TYPES_H_ */
