/*  Component_Graph.h

   Copyright (C) 2008 Stephen Torri

   This file is part of Libreverse.

   Libreverse is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published
   by the Free Software Foundation; either version 3, or (at your
   option) any later version.

   Libreverse is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see
   <http://www.gnu.org/licenses/>.
*/

#ifndef COMPONENT_GRAPH_H_
#define COMPONENT_GRAPH_H_

#include "Component_Types.h"

namespace libreverse { namespace infrastructure {

    class Component;

    class Component_Graph {
    public:

        explicit Component_Graph ();

        Component_Graph ( Component_Graph const& rhs );

        void add_Component ( infrastructure_types::Component::ptr_t obj_ptr );

        void add_Child ( boost::uint32_t parent_id,
                         infrastructure_types::Component_Graph::Vertex_t& child_node );

        infrastructure_types::Component_Graph::Component_List_t
        get_Parent_List ( infrastructure_types::Component_Graph::Vertex_t const& v_ref );

        infrastructure_types::Component_Graph::Component_List_t get_Parent_List ( boost::uint32_t id );

        // Setup the source Component for the whole graph
        // This is used from within the Reverse class after the Configurator
        // has pieced together the entire Component_Graph from the three
        // individual files (input, analysis, and output)
        // It should not be used for anything else.
        //
        // NOTE: Change input to accept a Component ptr. This pointer will
        // be for the data input to this graph. It is necessary so that the
        // precodition visitor will be able to check the root component (id 1)
        // has the right input from the data input (id 0). Add pointer via
        // add_Component to position 0
        void initialize_Source ( infrastructure_types::Component::ptr_t source_ptr );

        infrastructure_types::Component_Graph::Graph_t const& get_Graph () const;

        infrastructure_types::Component::ptr_t get_Component ( infrastructure_types::Component_Graph::Vertex_t node ) const;

        infrastructure_types::Component::ptr_t get_End_Component (void);

        infrastructure_types::Component_Graph::Vertex_t const& get_Vertex ( boost::uint32_t id ) const;

        bool empty () const;

        Component_Graph& operator= ( Component_Graph const& rhs );

        void swap ( Component_Graph& rhs );

        std::string to_String (void) const;

    private:

        infrastructure_types::Component_Graph::Graph_t m_graph;

        infrastructure_types::Component_Graph::IdVertexMap_t m_index;

        infrastructure_types::Component_Graph::Component_Map_t m_comp_map;
    };

} /* namespace infrastructure */
} /* namespace libreverse */

#endif /* COMPONENT_GRAPH_H_ */
