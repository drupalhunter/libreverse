/*  Component_Data.h

   Copyright (C) 2008 Stephen Torri

   This file is part of Libreverse.

   Libreverse is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published
   by the Free Software Foundation; either version 3, or (at your
   option) any later version.

   Libreverse is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see
   <http://www.gnu.org/licenses/>.
*/

#ifndef COMPONENT_DATA_H_
#define COMPONENT_DATA_H_

#include "libreverse/errors/Component_Exception.h"
#include "Component_Types.h"
#include "libreverse/data_containers/Data_Types.h"
#include <boost/shared_ptr.hpp>
#include <map>
#include "libreverse/meta/Meta_Object.h"

namespace libreverse { namespace infrastructure {

    class Component_Data
    {
    public:

        /*!
         * \brief Constructor
         * \param id Unique id for the instance of this filter
         */
        explicit Component_Data ( boost::uint32_t id );

        /*!
         * \brief Copy constructor
         */
        Component_Data ( Component_Data const& ref );

        virtual ~Component_Data ();

        /**
         * \brief Return the ID number of this Component
         *
         * \return ID number
         */
        boost::uint32_t get_ID (void) const;


        /**
         * \brief Upsream Component is providing input
         *
         * This is used during the creation of the Component_Graph. Each
         * Component providing data to a child component must be provided
         * to the child. The child uses this information to check to see
         * if it has all its required inputs before running its analysis.
         *
         * \param id Identity of the Component providing input
         * \param data Input data.
         *
         * \pre The variable 'id' represents an Component existing
         * in the Component Graph.
         *
         * \post New id is contains in the list of inputs
         */
        virtual void add_Input_Source ( boost::uint32_t id );

        /**
         * This is used during the actual processing of the
         * Component_Graph. The parent Component, identified by id,
         * is done with its analysis and has recorded its results
         * into the Data_Map_t in the Graph_Visitor. The child Component
         * marks that it has received input from the parent Component.
         * 
         * \param id Identity of the Component that finished analsysis
         *
         * \pre id is in the list of inputs
         *
         * \post bool value of id set to true
         */
        virtual void received_Input_Source_Data ( boost::uint32_t id );

        void gather_Inputs ( infrastructure_types::Component_Graph::Data_Map_t* data_ptr );

        bool find ( boost::uint32_t id );

	infrastructure_types::Data_Source_Base::ptr_t get_Data_Source (void) const;

        bool is_Filename_Set (void) const;

        bool is_Control_Flow_Graph_Sequence_Set (void) const;

        bool is_Memory_Map_Set (void) const;

        data_types::Filename::const_ptr_t get_Input_Filename(void) const;

        data_types::Control_Flow_Graph_Sequence::const_ptr_t get_Input_Control_Flow_Graph_Sequence(void) const;

        data_types::Memory_Map::const_ptr_t get_Input_Memory_Map(void) const;

        void set_Output_Data ( data_types::Filename::const_ptr_t file_ptr );

        void set_Output_Data ( data_types::Control_Flow_Graph_Sequence::const_ptr_t graph_ptr );

        void set_Output_Data ( data_types::Memory_Map::const_ptr_t map_ptr );

        void set_Output_Meta_Data ( meta::Meta_Object::const_ptr_t meta_ptr );

        infrastructure_types::Component_Data::Input_Token_t::const_iterator get_Source_List_Begin (void) const;

        infrastructure_types::Component_Data::Input_Token_t::const_iterator get_Source_List_End (void) const;

        boost::shared_ptr<meta::Meta_Object const> 
        get_Input_Meta_Data (void) const;

        Component_Data& operator= ( Component_Data const& ref);

        void swap ( Component_Data& ref);

        std::string to_String (void) const;

    private:

        //---------------------------------
        //      VARIABLES
        //---------------------------------
        boost::uint32_t m_id;

        infrastructure_types::Component_Data::Input_Token_t m_source_list;

        infrastructure_types::Data_Object::ptr_t m_data_obj_ptr;

        boost::shared_ptr<meta::Meta_Object> m_meta_ptr;

        data_types::Filename::const_ptr_t m_filename_ptr;
        data_types::Control_Flow_Graph_Sequence::const_ptr_t m_graph_ptr;
        data_types::Memory_Map::const_ptr_t m_map_ptr;

    };

} /* namespace infrastructure */
} /* namespace libreverse */

#endif /* COMPONENT_DATA_H_ */
