/*  Component_State.h

   Copyright (C) 2008 Stephen Torri

   This file is part of Libreverse.

   Libreverse is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published
   by the Free Software Foundation; either version 3, or (at your
   option) any later version.

   Libreverse is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see
   <http://www.gnu.org/licenses/>.
*/

#ifndef COMPONENT_STATE_H_
#define COMPONENT_STATE_H_

#include <boost/shared_ptr.hpp>
#include <boost/cstdint.hpp>
#include <boost/enable_shared_from_this.hpp>
#include "Graph_Types.h"
#include "Component_Types.h"

namespace libreverse { namespace infrastructure {

    class Component_State : public boost::enable_shared_from_this<Component_State>
    {
    public:

        friend class Component_Source_State;
        friend class Component_Working_State;

        /*!
         * \brief Constructor
         */
        explicit Component_State ( boost::uint32_t id );

        /*!
         * \brief Copy constructor
         */
        explicit Component_State ( Component_State const& rhs );

        /*!
         * \brief Default constructor
         */
        virtual ~Component_State(){}

        /**
         *  Component API
         */

        // Set state ( WORKING / SOURCE )
        void switch_State ( boost::uint32_t mode );

        boost::uint32_t get_ID (void) const;

        void run ( infrastructure_types::Component_Actor::ptr_t child_ptr,
                   Graph_Base::Data_Map_t* data_ptr );
        
        infrastructure_types::Data_Source_Base::ptr_t results (void) const;

        // Check to see if the state value is valid
        bool check_Mode_Value ( boost::uint32_t mode );

        // Add a new input source
        void add_Input_Source ( boost::uint32_t id );

        // We have received data and so we mark the state
        void received_Input_Source_Data ( boost::uint32_t id );

        infrastructure_types::Component_Data::ptr_t get_Data (void) const;
        
	infrastructure_types::Component_Data::Input_Token_t::const_iterator get_Source_List_Begin (void) const;

	infrastructure_types::Component_Data::Input_Token_t::const_iterator get_Source_List_End (void) const;

        Component_State& operator= ( Component_State const& rhs );

        void swap ( Component_State& rhs );

    private:

        //---------------------------------
        //      STATE ACCESS METHODS
        //---------------------------------
        void set_State ( infrastructure_types::Component_State_Algorithm::ptr_t );

        infrastructure_types::Component_Data::ptr_t m_data_ptr;

        infrastructure_types::Component_State_Algorithm::ptr_t m_working_state_ptr;

        infrastructure_types::Component_State_Algorithm::ptr_t m_source_state_ptr;

        infrastructure_types::Component_State_Algorithm::ptr_t m_present_state_ptr;

    };

} /* namespace infrastructure */
} /* namespace libreverse */

#endif /* COMPONENT_STATE_H_ */
