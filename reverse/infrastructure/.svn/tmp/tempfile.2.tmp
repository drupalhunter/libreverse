#include "Configuration_Data.h"
#include "libreverse/errors/Configuration_Exception.h"
#include "libreverse/errors/Component_Exception.h"
#include "libreverse/infrastructure/data_source/Memory_Data_Source_Config.h"
#include "config.h"
#include <iostream>
#include <boost/format.hpp>
#include "libreverse/Trace.h"

using namespace libreverse::api;
using namespace libreverse::trace;

namespace libreverse { namespace infrastructure {

    Configuration_Data::Configuration_Data()
        : m_data ( new Memory_Data_Source_Config() ),
          m_formula_directory ( FORMULA_PREFIX
                                "formulas" ),
          m_dll_directory ( "" )
    {
      Trace::write_Trace ( TraceArea::INFRASTRUCTURE,
			   TraceLevel::DETAIL,
			   "Inside Configuration_Data Constructor" );
    }

    boost::shared_ptr<Data_Source_Config_Base>
    Configuration_Data::get_Transfer_Config()
    {
        Trace::write_Trace ( TraceArea::INFRASTRUCTURE,
			     TraceLevel::DETAIL,
                             "Inside Configuration_Data::get_Transfer_Config" );

        return m_data;
    }

    void
    Configuration_Data::set_Transfer_Config ( infrastructure_types::Data_Source_Config_Base::ptr_t obj_ptr )
    {
        Trace::write_Trace ( TraceArea::INFRASTRUCTURE,
			     TraceLevel::DETAIL,
                             "Entering Configuration_Data::set_Transfer_Config" );

        if ( obj_ptr.get() == 0 )
            {
                Trace::write_Trace
                    ( TraceArea::INFRASTRUCTURE,
		      TraceLevel::ERROR,
                      boost::str(boost::format("Exception throw in %s at line %d")
                                 % __FILE__
                                 % __LINE__ ) );

                throw errors::Component_Exception
                    ( errors::Component_Exception::NULL_POINTER );
            }
        else
            {
                m_data = obj_ptr;
            }

        Trace::write_Trace ( TraceArea::INFRASTRUCTURE,
			     TraceLevel::DETAIL,
                             "Exiting Configuration_Data::set_Transfer_Config" );
    }

    void
    Configuration_Data::set_Formula_Directory ( std::string const& obj )
    {
        Trace::write_Trace ( TraceArea::INFRASTRUCTURE,
			     TraceLevel::DETAIL,
                             "Entering Configuration_Data::set_Formula_Directory" );

        if ( obj.empty() )
            {
                Trace::write_Trace
                    ( TraceArea::INFRASTRUCTURE,
		      TraceLevel::ERROR,
                      boost::str(boost::format("Exception throw in %s at line %d")
                                 % __FILE__
                                 % __LINE__ ) );

                throw errors::Configuration_Exception
                    ( errors::Configuration_Exception::EMPTY_INPUT );
            }
        else
            {
                m_formula_directory = obj;
            }

        Trace::write_Trace ( TraceArea::INFRASTRUCTURE,
			     TraceLevel::DETAIL,
                             "Exiting Configuration_Data::set_Formula_Directory" );

    }

    std::string
    Configuration_Data::get_Formula_Directory (void) const
    {
        Trace::write_Trace ( TraceArea::INFRASTRUCTURE,
			     TraceLevel::DETAIL,
                             "Inside Configuration_Data::get_Formula_Directory" );

        return m_formula_directory;
    }

    void
    Configuration_Data::set_DLL_Directory (std::string const& obj )
    {
        Trace::write_Trace ( TraceArea::INFRASTRUCTURE,
			     TraceLevel::DETAIL,
                             "Entering Configuration_Data::set_DLL_Directory" );

        if ( obj.empty() )
            {
                Trace::write_Trace
                    ( TraceArea::INFRASTRUCTURE,
		      TraceLevel::ERROR,
                      boost::str(boost::format("Exception throw in %s at line %d")
                                 % __FILE__
                                 % __LINE__ ) );

                throw errors::Configuration_Exception
                    ( errors::Configuration_Exception::EMPTY_INPUT );
            }
        else
            {
                m_dll_directory = obj;
            }

        Trace::write_Trace ( TraceArea::INFRASTRUCTURE,
			     TraceLevel::DETAIL,
                             "Exiting Configuration_Data::set_DLL_Directory" );

    }

    std::string
    Configuration_Data::get_DLL_Directory (void) const
    {
        Trace::write_Trace ( TraceArea::INFRASTRUCTURE,
			     TraceLevel::DETAIL,
                             "Inside Configuration_Data::get_DLL_Directory" );

        return m_dll_directory;
    }

    /*
      void Configuration_Data::add_DLL_Path ( std::string name,
      Path_t location )
      {
      boost::algorithm::to_lower ( name );

      m_dll_map.insert ( std::make_pair ( name, location ) );
      }

      Configuration_Data::Path_t const&
      Configuration_Data::get_DLL_Path ( std::string const& name )
      {
      DLL_Map_t::const_iterator pos = m_dll_map.find ( name );
      if ( pos == m_dll_map.end() )
      {
      std::cerr << boost::format("Exception throw in %s at line %d")
      % __FILE__
      % __LINE__
      << std::endl;

      throw errors::Configuration_Exception
      (errors::Configuration_Exception::DLL_NOT_FOUND);
      }
      return (*pos).second;
      }
    */

    void
    Configuration_Data::dump (void) const
    {
        Trace::write_Trace ( TraceArea::INFRASTRUCTURE,
			     TraceLevel::DETAIL,
                             "Entering Configuration_Data::dump" );

        std::cout << "Configuration Data" << std::endl
                  << "--------------------------------" << std::endl
                  << std::endl
                  << "  Formula Directory: " << m_formula_directory << std::endl
                  << "  DLL Directory: " << m_dll_directory << std::endl
                  << std::endl
                  << "  DLL files found:" << std::endl;

        /*
          for ( DLL_Map_t::const_iterator pos = m_dll_map.begin();
          pos != m_dll_map.end();
          pos++ )
          {
          std::cout << boost::format("    %1s: %2s") %
          (*pos).first %
          ((*pos).second).string()
          << std::endl;
          }
        */

        Trace::write_Trace ( TraceArea::INFRASTRUCTURE,
			     TraceLevel::DETAIL,
                             "Exiting Configuration_Data::dump" );

    }
} /* namespace infrastructure */
} /* namespace libreverse */
